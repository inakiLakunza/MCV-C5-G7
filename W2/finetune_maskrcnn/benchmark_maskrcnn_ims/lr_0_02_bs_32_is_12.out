1
The device we will be working on is: cuda
[03/01 20:07:42 d2.engine.defaults]: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=12, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=44, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 11, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[03/01 20:07:46 d2.data.build]: Removed 0 images with no usable annotations. 5007 images left.
[03/01 20:07:46 d2.data.build]: Distribution of instances among all 11 categories:
|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
| background | 0            |    car     | 18822        | pedestrian | 8065         |
|            | 0            |            | 0            |            | 0            |
|            | 0            |            | 0            |            | 0            |
|            | 0            |   ignore   | 4977         |            |              |
|   total    | 31864        |            |              |            |              |
[03/01 20:07:46 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[03/01 20:07:46 d2.data.build]: Using training sampler TrainingSampler
[03/01 20:07:46 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/01 20:07:46 d2.data.common]: Serializing 5007 elements to byte tensors and concatenating them all ...
[03/01 20:07:46 d2.data.common]: Serialized dataset takes 13.56 MiB
[03/01 20:07:46 d2.data.build]: Making batched data loader with batch_size=12
WARNING [03/01 20:07:46 d2.solver.build]: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[03/01 20:07:46 d2.checkpoint.detection_checkpoint]: [DetectionCheckpointer] Loading from https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl ...
[03/01 20:07:46 d2.engine.train_loop]: Starting training from iteration 0
[03/01 20:08:12 d2.utils.events]:  eta: 0:21:42  iter: 19  total_loss: 3.248  loss_cls: 1.829  loss_box_reg: 0.4653  loss_mask: 0.6628  loss_rpn_cls: 0.1336  loss_rpn_loc: 0.06911    time: 0.9561  last_time: 0.8710  data_time: 0.4293  last_data_time: 0.2043   lr: 0.00039962  max_mem: 12248M
[03/01 20:08:38 d2.utils.events]:  eta: 0:21:26  iter: 39  total_loss: 1.511  loss_cls: 0.4766  loss_box_reg: 0.4499  loss_mask: 0.4445  loss_rpn_cls: 0.05602  loss_rpn_loc: 0.07789    time: 0.9288  last_time: 0.8575  data_time: 0.2170  last_data_time: 0.1922   lr: 0.00079922  max_mem: 12248M
[03/01 20:08:58 d2.utils.events]:  eta: 0:21:24  iter: 59  total_loss: 1.18  loss_cls: 0.3105  loss_box_reg: 0.4121  loss_mask: 0.3314  loss_rpn_cls: 0.04599  loss_rpn_loc: 0.07273    time: 0.9456  last_time: 0.8815  data_time: 0.2477  last_data_time: 0.2007   lr: 0.0011988  max_mem: 12248M
[03/01 20:09:16 d2.utils.events]:  eta: 0:21:08  iter: 79  total_loss: 0.9169  loss_cls: 0.2219  loss_box_reg: 0.2922  loss_mask: 0.2852  loss_rpn_cls: 0.04093  loss_rpn_loc: 0.07445    time: 0.9351  last_time: 0.8495  data_time: 0.2099  last_data_time: 0.1732   lr: 0.0015984  max_mem: 12248M
[03/01 20:09:33 d2.utils.events]:  eta: 0:20:46  iter: 99  total_loss: 0.8119  loss_cls: 0.1867  loss_box_reg: 0.2572  loss_mask: 0.2546  loss_rpn_cls: 0.03418  loss_rpn_loc: 0.0714    time: 0.9258  last_time: 1.0861  data_time: 0.1949  last_data_time: 0.3955   lr: 0.001998  max_mem: 12248M
[03/01 20:09:51 d2.utils.events]:  eta: 0:20:28  iter: 119  total_loss: 0.764  loss_cls: 0.1604  loss_box_reg: 0.2376  loss_mask: 0.2449  loss_rpn_cls: 0.03325  loss_rpn_loc: 0.07466    time: 0.9209  last_time: 0.8574  data_time: 0.2054  last_data_time: 0.1830   lr: 0.0023976  max_mem: 12248M
[03/01 20:10:09 d2.utils.events]:  eta: 0:20:07  iter: 139  total_loss: 0.7151  loss_cls: 0.1416  loss_box_reg: 0.2153  loss_mask: 0.2561  loss_rpn_cls: 0.02854  loss_rpn_loc: 0.0659    time: 0.9145  last_time: 0.8782  data_time: 0.1865  last_data_time: 0.1616   lr: 0.0027972  max_mem: 12248M
[03/01 20:10:26 d2.utils.events]:  eta: 0:19:42  iter: 159  total_loss: 0.6859  loss_cls: 0.143  loss_box_reg: 0.2008  loss_mask: 0.2372  loss_rpn_cls: 0.02644  loss_rpn_loc: 0.07139    time: 0.9089  last_time: 0.8613  data_time: 0.1850  last_data_time: 0.1852   lr: 0.0031968  max_mem: 12248M
[03/01 20:10:44 d2.utils.events]:  eta: 0:19:25  iter: 179  total_loss: 0.6961  loss_cls: 0.1357  loss_box_reg: 0.199  loss_mask: 0.2342  loss_rpn_cls: 0.02942  loss_rpn_loc: 0.07898    time: 0.9067  last_time: 0.8981  data_time: 0.2004  last_data_time: 0.2175   lr: 0.0035964  max_mem: 12368M
[03/01 20:11:01 d2.utils.events]:  eta: 0:19:03  iter: 199  total_loss: 0.659  loss_cls: 0.1318  loss_box_reg: 0.1899  loss_mask: 0.2248  loss_rpn_cls: 0.028  loss_rpn_loc: 0.06739    time: 0.9020  last_time: 0.8534  data_time: 0.1714  last_data_time: 0.1407   lr: 0.003996  max_mem: 12368M
[03/01 20:11:19 d2.utils.events]:  eta: 0:18:46  iter: 219  total_loss: 0.647  loss_cls: 0.1303  loss_box_reg: 0.1993  loss_mask: 0.214  loss_rpn_cls: 0.028  loss_rpn_loc: 0.0655    time: 0.9008  last_time: 0.8711  data_time: 0.1981  last_data_time: 0.1722   lr: 0.0043956  max_mem: 12368M
[03/01 20:11:36 d2.utils.events]:  eta: 0:18:26  iter: 239  total_loss: 0.6133  loss_cls: 0.1251  loss_box_reg: 0.1704  loss_mask: 0.2044  loss_rpn_cls: 0.0226  loss_rpn_loc: 0.07348    time: 0.8970  last_time: 0.7885  data_time: 0.1773  last_data_time: 0.1500   lr: 0.0047952  max_mem: 12368M
[03/01 20:11:54 d2.utils.events]:  eta: 0:18:10  iter: 259  total_loss: 0.6491  loss_cls: 0.1335  loss_box_reg: 0.2053  loss_mask: 0.2037  loss_rpn_cls: 0.02372  loss_rpn_loc: 0.06511    time: 0.8967  last_time: 0.8924  data_time: 0.1958  last_data_time: 0.1903   lr: 0.0051948  max_mem: 12368M
[03/01 20:12:12 d2.utils.events]:  eta: 0:17:53  iter: 279  total_loss: 0.6332  loss_cls: 0.1357  loss_box_reg: 0.1976  loss_mask: 0.2089  loss_rpn_cls: 0.02685  loss_rpn_loc: 0.07324    time: 0.8967  last_time: 0.9215  data_time: 0.2036  last_data_time: 0.2023   lr: 0.0055944  max_mem: 12398M
[03/01 20:12:30 d2.utils.events]:  eta: 0:17:36  iter: 299  total_loss: 0.62  loss_cls: 0.129  loss_box_reg: 0.1937  loss_mask: 0.2005  loss_rpn_cls: 0.02596  loss_rpn_loc: 0.07949    time: 0.8971  last_time: 1.0217  data_time: 0.2080  last_data_time: 0.2055   lr: 0.005994  max_mem: 12398M
[03/01 20:12:47 d2.utils.events]:  eta: 0:17:18  iter: 319  total_loss: 0.6103  loss_cls: 0.1239  loss_box_reg: 0.1911  loss_mask: 0.1983  loss_rpn_cls: 0.02108  loss_rpn_loc: 0.06474    time: 0.8953  last_time: 0.8920  data_time: 0.1805  last_data_time: 0.1836   lr: 0.0063936  max_mem: 12398M
[03/01 20:13:06 d2.utils.events]:  eta: 0:17:01  iter: 339  total_loss: 0.6473  loss_cls: 0.1349  loss_box_reg: 0.211  loss_mask: 0.1984  loss_rpn_cls: 0.02454  loss_rpn_loc: 0.06954    time: 0.8963  last_time: 0.8737  data_time: 0.2117  last_data_time: 0.1641   lr: 0.0067932  max_mem: 12450M
[03/01 20:13:24 d2.utils.events]:  eta: 0:16:45  iter: 359  total_loss: 0.6377  loss_cls: 0.1348  loss_box_reg: 0.205  loss_mask: 0.2033  loss_rpn_cls: 0.02227  loss_rpn_loc: 0.06827    time: 0.8966  last_time: 0.9414  data_time: 0.1905  last_data_time: 0.2193   lr: 0.0071928  max_mem: 12450M
[03/01 20:13:42 d2.utils.events]:  eta: 0:16:27  iter: 379  total_loss: 0.6259  loss_cls: 0.1227  loss_box_reg: 0.2074  loss_mask: 0.203  loss_rpn_cls: 0.02266  loss_rpn_loc: 0.06957    time: 0.8963  last_time: 0.8401  data_time: 0.1836  last_data_time: 0.1622   lr: 0.0075924  max_mem: 12652M
[03/01 20:13:59 d2.utils.events]:  eta: 0:16:09  iter: 399  total_loss: 0.6254  loss_cls: 0.1209  loss_box_reg: 0.1955  loss_mask: 0.2009  loss_rpn_cls: 0.02682  loss_rpn_loc: 0.07943    time: 0.8960  last_time: 0.9648  data_time: 0.1936  last_data_time: 0.2355   lr: 0.007992  max_mem: 12652M
[03/01 20:14:17 d2.utils.events]:  eta: 0:15:53  iter: 419  total_loss: 0.6512  loss_cls: 0.1273  loss_box_reg: 0.2044  loss_mask: 0.2047  loss_rpn_cls: 0.02269  loss_rpn_loc: 0.06792    time: 0.8960  last_time: 0.9143  data_time: 0.1928  last_data_time: 0.2027   lr: 0.0083916  max_mem: 12652M
[03/01 20:14:36 d2.utils.events]:  eta: 0:15:37  iter: 439  total_loss: 0.6199  loss_cls: 0.1242  loss_box_reg: 0.2084  loss_mask: 0.1868  loss_rpn_cls: 0.01795  loss_rpn_loc: 0.073    time: 0.8966  last_time: 0.9329  data_time: 0.1961  last_data_time: 0.2309   lr: 0.0087912  max_mem: 12652M
[03/01 20:14:54 d2.utils.events]:  eta: 0:15:21  iter: 459  total_loss: 0.601  loss_cls: 0.1232  loss_box_reg: 0.201  loss_mask: 0.1936  loss_rpn_cls: 0.01659  loss_rpn_loc: 0.06065    time: 0.8970  last_time: 0.8260  data_time: 0.1957  last_data_time: 0.1570   lr: 0.0091908  max_mem: 12652M
[03/01 20:15:11 d2.utils.events]:  eta: 0:15:03  iter: 479  total_loss: 0.5876  loss_cls: 0.1172  loss_box_reg: 0.1849  loss_mask: 0.1848  loss_rpn_cls: 0.01914  loss_rpn_loc: 0.05672    time: 0.8966  last_time: 0.9513  data_time: 0.1826  last_data_time: 0.2028   lr: 0.0095904  max_mem: 12652M
[03/01 20:15:31 d2.utils.events]:  eta: 0:14:46  iter: 499  total_loss: 0.6046  loss_cls: 0.1192  loss_box_reg: 0.199  loss_mask: 0.1904  loss_rpn_cls: 0.01976  loss_rpn_loc: 0.06758    time: 0.8973  last_time: 0.9647  data_time: 0.1987  last_data_time: 0.2264   lr: 0.00999  max_mem: 12652M
[03/01 20:15:49 d2.utils.events]:  eta: 0:14:30  iter: 519  total_loss: 0.5978  loss_cls: 0.1251  loss_box_reg: 0.1912  loss_mask: 0.1916  loss_rpn_cls: 0.01662  loss_rpn_loc: 0.06565    time: 0.8981  last_time: 0.8861  data_time: 0.1974  last_data_time: 0.2001   lr: 0.01039  max_mem: 12652M
[03/01 20:16:07 d2.utils.events]:  eta: 0:14:13  iter: 539  total_loss: 0.5919  loss_cls: 0.1161  loss_box_reg: 0.1955  loss_mask: 0.1906  loss_rpn_cls: 0.02148  loss_rpn_loc: 0.06047    time: 0.8986  last_time: 0.8745  data_time: 0.2040  last_data_time: 0.1761   lr: 0.010789  max_mem: 12652M
[03/01 20:16:25 d2.utils.events]:  eta: 0:13:56  iter: 559  total_loss: 0.5607  loss_cls: 0.1155  loss_box_reg: 0.1755  loss_mask: 0.1892  loss_rpn_cls: 0.01932  loss_rpn_loc: 0.06568    time: 0.8984  last_time: 0.9116  data_time: 0.1894  last_data_time: 0.2074   lr: 0.011189  max_mem: 12652M
[03/01 20:16:43 d2.utils.events]:  eta: 0:13:39  iter: 579  total_loss: 0.5582  loss_cls: 0.1083  loss_box_reg: 0.1882  loss_mask: 0.1801  loss_rpn_cls: 0.01737  loss_rpn_loc: 0.074    time: 0.8985  last_time: 0.8723  data_time: 0.1872  last_data_time: 0.1662   lr: 0.011588  max_mem: 12652M
[03/01 20:17:01 d2.utils.events]:  eta: 0:13:21  iter: 599  total_loss: 0.5471  loss_cls: 0.1099  loss_box_reg: 0.1785  loss_mask: 0.1688  loss_rpn_cls: 0.01787  loss_rpn_loc: 0.0622    time: 0.8985  last_time: 0.8946  data_time: 0.1821  last_data_time: 0.1628   lr: 0.011988  max_mem: 12741M
[03/01 20:17:19 d2.utils.events]:  eta: 0:13:03  iter: 619  total_loss: 0.5463  loss_cls: 0.1041  loss_box_reg: 0.1791  loss_mask: 0.1755  loss_rpn_cls: 0.01654  loss_rpn_loc: 0.06172    time: 0.8984  last_time: 0.8780  data_time: 0.1921  last_data_time: 0.1943   lr: 0.012388  max_mem: 12741M
[03/01 20:17:38 d2.utils.events]:  eta: 0:12:45  iter: 639  total_loss: 0.5662  loss_cls: 0.1102  loss_box_reg: 0.1828  loss_mask: 0.1814  loss_rpn_cls: 0.01846  loss_rpn_loc: 0.05993    time: 0.8988  last_time: 1.1030  data_time: 0.1913  last_data_time: 0.3427   lr: 0.012787  max_mem: 12767M
[03/01 20:17:56 d2.utils.events]:  eta: 0:12:28  iter: 659  total_loss: 0.5732  loss_cls: 0.1143  loss_box_reg: 0.1876  loss_mask: 0.1795  loss_rpn_cls: 0.01679  loss_rpn_loc: 0.06113    time: 0.8989  last_time: 0.9727  data_time: 0.1925  last_data_time: 0.2806   lr: 0.013187  max_mem: 12848M
[03/01 20:18:13 d2.utils.events]:  eta: 0:12:10  iter: 679  total_loss: 0.5337  loss_cls: 0.1027  loss_box_reg: 0.1743  loss_mask: 0.1814  loss_rpn_cls: 0.01945  loss_rpn_loc: 0.05674    time: 0.8983  last_time: 0.8461  data_time: 0.1862  last_data_time: 0.1270   lr: 0.013586  max_mem: 12848M
[03/01 20:18:32 d2.utils.events]:  eta: 0:11:53  iter: 699  total_loss: 0.5656  loss_cls: 0.1091  loss_box_reg: 0.1926  loss_mask: 0.1825  loss_rpn_cls: 0.01797  loss_rpn_loc: 0.06401    time: 0.8992  last_time: 0.9598  data_time: 0.1991  last_data_time: 0.2394   lr: 0.013986  max_mem: 12848M
[03/01 20:18:50 d2.utils.events]:  eta: 0:11:35  iter: 719  total_loss: 0.5287  loss_cls: 0.0956  loss_box_reg: 0.1695  loss_mask: 0.1725  loss_rpn_cls: 0.02004  loss_rpn_loc: 0.05644    time: 0.8994  last_time: 0.8617  data_time: 0.1810  last_data_time: 0.1415   lr: 0.014386  max_mem: 12848M
[03/01 20:19:08 d2.utils.events]:  eta: 0:11:18  iter: 739  total_loss: 0.5412  loss_cls: 0.1109  loss_box_reg: 0.1839  loss_mask: 0.1747  loss_rpn_cls: 0.01763  loss_rpn_loc: 0.05698    time: 0.8999  last_time: 1.0250  data_time: 0.1932  last_data_time: 0.2919   lr: 0.014785  max_mem: 12976M
[03/01 20:19:27 d2.utils.events]:  eta: 0:11:01  iter: 759  total_loss: 0.5714  loss_cls: 0.1126  loss_box_reg: 0.1905  loss_mask: 0.1759  loss_rpn_cls: 0.01711  loss_rpn_loc: 0.06941    time: 0.9003  last_time: 0.9044  data_time: 0.1977  last_data_time: 0.2010   lr: 0.015185  max_mem: 12976M
[03/01 20:19:45 d2.utils.events]:  eta: 0:10:43  iter: 779  total_loss: 0.5704  loss_cls: 0.1123  loss_box_reg: 0.1992  loss_mask: 0.182  loss_rpn_cls: 0.01555  loss_rpn_loc: 0.06063    time: 0.9008  last_time: 0.9033  data_time: 0.1810  last_data_time: 0.1577   lr: 0.015584  max_mem: 12976M
[03/01 20:20:03 d2.utils.events]:  eta: 0:10:26  iter: 799  total_loss: 0.5516  loss_cls: 0.1112  loss_box_reg: 0.1915  loss_mask: 0.1856  loss_rpn_cls: 0.01576  loss_rpn_loc: 0.05292    time: 0.9012  last_time: 0.9305  data_time: 0.1923  last_data_time: 0.2027   lr: 0.015984  max_mem: 12976M
[03/01 20:20:22 d2.utils.events]:  eta: 0:10:08  iter: 819  total_loss: 0.557  loss_cls: 0.1079  loss_box_reg: 0.1927  loss_mask: 0.1705  loss_rpn_cls: 0.01887  loss_rpn_loc: 0.06434    time: 0.9016  last_time: 0.9249  data_time: 0.2014  last_data_time: 0.1734   lr: 0.016384  max_mem: 12976M
[03/01 20:20:40 d2.utils.events]:  eta: 0:09:50  iter: 839  total_loss: 0.5553  loss_cls: 0.1096  loss_box_reg: 0.1817  loss_mask: 0.1786  loss_rpn_cls: 0.01536  loss_rpn_loc: 0.05955    time: 0.9017  last_time: 0.9731  data_time: 0.1849  last_data_time: 0.2161   lr: 0.016783  max_mem: 12976M
[03/01 20:20:58 d2.utils.events]:  eta: 0:09:32  iter: 859  total_loss: 0.538  loss_cls: 0.1033  loss_box_reg: 0.1838  loss_mask: 0.1695  loss_rpn_cls: 0.01428  loss_rpn_loc: 0.06644    time: 0.9018  last_time: 0.8992  data_time: 0.1827  last_data_time: 0.1811   lr: 0.017183  max_mem: 12976M
[03/01 20:21:16 d2.utils.events]:  eta: 0:09:14  iter: 879  total_loss: 0.5334  loss_cls: 0.0977  loss_box_reg: 0.1785  loss_mask: 0.1731  loss_rpn_cls: 0.01391  loss_rpn_loc: 0.06343    time: 0.9023  last_time: 0.9124  data_time: 0.1935  last_data_time: 0.2044   lr: 0.017582  max_mem: 12976M
[03/01 20:21:34 d2.utils.events]:  eta: 0:08:57  iter: 899  total_loss: 0.5129  loss_cls: 0.09703  loss_box_reg: 0.1653  loss_mask: 0.1703  loss_rpn_cls: 0.01315  loss_rpn_loc: 0.05529    time: 0.9023  last_time: 0.9055  data_time: 0.1765  last_data_time: 0.1816   lr: 0.017982  max_mem: 12976M
[03/01 20:21:53 d2.utils.events]:  eta: 0:08:40  iter: 919  total_loss: 0.5365  loss_cls: 0.1082  loss_box_reg: 0.1851  loss_mask: 0.1668  loss_rpn_cls: 0.01542  loss_rpn_loc: 0.06036    time: 0.9029  last_time: 0.9570  data_time: 0.1977  last_data_time: 0.2395   lr: 0.018382  max_mem: 12976M
[03/01 20:22:12 d2.utils.events]:  eta: 0:08:22  iter: 939  total_loss: 0.5418  loss_cls: 0.09269  loss_box_reg: 0.1899  loss_mask: 0.1673  loss_rpn_cls: 0.01549  loss_rpn_loc: 0.06209    time: 0.9037  last_time: 0.9933  data_time: 0.2083  last_data_time: 0.3006   lr: 0.018781  max_mem: 12976M
[03/01 20:22:30 d2.utils.events]:  eta: 0:08:04  iter: 959  total_loss: 0.5385  loss_cls: 0.09582  loss_box_reg: 0.1823  loss_mask: 0.1673  loss_rpn_cls: 0.01587  loss_rpn_loc: 0.06769    time: 0.9040  last_time: 0.9175  data_time: 0.1888  last_data_time: 0.1724   lr: 0.019181  max_mem: 12976M
[03/01 20:22:49 d2.utils.events]:  eta: 0:07:47  iter: 979  total_loss: 0.5425  loss_cls: 0.1004  loss_box_reg: 0.1927  loss_mask: 0.1643  loss_rpn_cls: 0.01836  loss_rpn_loc: 0.0581    time: 0.9043  last_time: 0.9084  data_time: 0.1919  last_data_time: 0.1988   lr: 0.01958  max_mem: 12976M
[03/01 20:23:08 d2.utils.events]:  eta: 0:07:29  iter: 999  total_loss: 0.5428  loss_cls: 0.1006  loss_box_reg: 0.1854  loss_mask: 0.1687  loss_rpn_cls: 0.01599  loss_rpn_loc: 0.06636    time: 0.9048  last_time: 0.9041  data_time: 0.1849  last_data_time: 0.1383   lr: 0.01998  max_mem: 13042M
[03/01 20:23:26 d2.utils.events]:  eta: 0:07:11  iter: 1019  total_loss: 0.5094  loss_cls: 0.09726  loss_box_reg: 0.1778  loss_mask: 0.1711  loss_rpn_cls: 0.01733  loss_rpn_loc: 0.05919    time: 0.9050  last_time: 0.9535  data_time: 0.1963  last_data_time: 0.2227   lr: 0.02  max_mem: 13042M
[03/01 20:23:45 d2.utils.events]:  eta: 0:06:53  iter: 1039  total_loss: 0.5272  loss_cls: 0.1028  loss_box_reg: 0.1795  loss_mask: 0.1663  loss_rpn_cls: 0.01369  loss_rpn_loc: 0.05397    time: 0.9051  last_time: 0.8277  data_time: 0.1837  last_data_time: 0.1330   lr: 0.02  max_mem: 13042M
[03/01 20:24:03 d2.utils.events]:  eta: 0:06:36  iter: 1059  total_loss: 0.4957  loss_cls: 0.09478  loss_box_reg: 0.165  loss_mask: 0.1529  loss_rpn_cls: 0.01166  loss_rpn_loc: 0.06313    time: 0.9053  last_time: 0.9255  data_time: 0.1857  last_data_time: 0.1807   lr: 0.02  max_mem: 13042M
[03/01 20:24:21 d2.utils.events]:  eta: 0:06:18  iter: 1079  total_loss: 0.531  loss_cls: 0.1021  loss_box_reg: 0.1849  loss_mask: 0.1664  loss_rpn_cls: 0.01352  loss_rpn_loc: 0.05808    time: 0.9058  last_time: 0.9690  data_time: 0.1949  last_data_time: 0.2214   lr: 0.02  max_mem: 13042M
[03/01 20:24:40 d2.utils.events]:  eta: 0:06:00  iter: 1099  total_loss: 0.5148  loss_cls: 0.09692  loss_box_reg: 0.1793  loss_mask: 0.1709  loss_rpn_cls: 0.01469  loss_rpn_loc: 0.06322    time: 0.9060  last_time: 0.8755  data_time: 0.1921  last_data_time: 0.1881   lr: 0.02  max_mem: 13042M
[03/01 20:24:58 d2.utils.events]:  eta: 0:05:42  iter: 1119  total_loss: 0.4983  loss_cls: 0.09133  loss_box_reg: 0.1718  loss_mask: 0.1637  loss_rpn_cls: 0.01454  loss_rpn_loc: 0.05423    time: 0.9062  last_time: 0.8403  data_time: 0.1968  last_data_time: 0.1515   lr: 0.02  max_mem: 13042M
[03/01 20:25:17 d2.utils.events]:  eta: 0:05:25  iter: 1139  total_loss: 0.5011  loss_cls: 0.09385  loss_box_reg: 0.1777  loss_mask: 0.1543  loss_rpn_cls: 0.0153  loss_rpn_loc: 0.05563    time: 0.9066  last_time: 1.1083  data_time: 0.2044  last_data_time: 0.3725   lr: 0.02  max_mem: 13042M
[03/01 20:25:35 d2.utils.events]:  eta: 0:05:07  iter: 1159  total_loss: 0.4876  loss_cls: 0.08532  loss_box_reg: 0.1669  loss_mask: 0.1604  loss_rpn_cls: 0.01501  loss_rpn_loc: 0.0552    time: 0.9068  last_time: 0.9564  data_time: 0.2003  last_data_time: 0.2453   lr: 0.02  max_mem: 13042M
[03/01 20:25:54 d2.utils.events]:  eta: 0:04:49  iter: 1179  total_loss: 0.5266  loss_cls: 0.09508  loss_box_reg: 0.1796  loss_mask: 0.1567  loss_rpn_cls: 0.01446  loss_rpn_loc: 0.06014    time: 0.9072  last_time: 0.9322  data_time: 0.1945  last_data_time: 0.2109   lr: 0.02  max_mem: 13042M
[03/01 20:26:12 d2.utils.events]:  eta: 0:04:31  iter: 1199  total_loss: 0.4963  loss_cls: 0.09129  loss_box_reg: 0.1753  loss_mask: 0.1613  loss_rpn_cls: 0.01311  loss_rpn_loc: 0.05428    time: 0.9074  last_time: 0.8823  data_time: 0.1929  last_data_time: 0.1681   lr: 0.02  max_mem: 13042M
[03/01 20:26:31 d2.utils.events]:  eta: 0:04:13  iter: 1219  total_loss: 0.5297  loss_cls: 0.09883  loss_box_reg: 0.1874  loss_mask: 0.1598  loss_rpn_cls: 0.01456  loss_rpn_loc: 0.05486    time: 0.9081  last_time: 0.9040  data_time: 0.2119  last_data_time: 0.1788   lr: 0.02  max_mem: 13042M
[03/01 20:26:50 d2.utils.events]:  eta: 0:03:56  iter: 1239  total_loss: 0.5035  loss_cls: 0.09295  loss_box_reg: 0.1651  loss_mask: 0.1586  loss_rpn_cls: 0.01514  loss_rpn_loc: 0.05832    time: 0.9083  last_time: 0.9103  data_time: 0.1950  last_data_time: 0.2012   lr: 0.02  max_mem: 13042M
[03/01 20:27:08 d2.utils.events]:  eta: 0:03:38  iter: 1259  total_loss: 0.4762  loss_cls: 0.08376  loss_box_reg: 0.1603  loss_mask: 0.1567  loss_rpn_cls: 0.01324  loss_rpn_loc: 0.0579    time: 0.9084  last_time: 0.9514  data_time: 0.1891  last_data_time: 0.1862   lr: 0.02  max_mem: 13042M
[03/01 20:27:26 d2.utils.events]:  eta: 0:03:20  iter: 1279  total_loss: 0.4822  loss_cls: 0.08655  loss_box_reg: 0.1655  loss_mask: 0.1537  loss_rpn_cls: 0.01241  loss_rpn_loc: 0.05598    time: 0.9087  last_time: 0.9085  data_time: 0.1934  last_data_time: 0.1705   lr: 0.02  max_mem: 13042M
[03/01 20:27:45 d2.utils.events]:  eta: 0:03:01  iter: 1299  total_loss: 0.4769  loss_cls: 0.08363  loss_box_reg: 0.1737  loss_mask: 0.151  loss_rpn_cls: 0.01125  loss_rpn_loc: 0.05062    time: 0.9089  last_time: 0.9409  data_time: 0.1966  last_data_time: 0.1978   lr: 0.02  max_mem: 13042M
[03/01 20:28:10 d2.utils.events]:  eta: 0:02:43  iter: 1319  total_loss: 0.4622  loss_cls: 0.08135  loss_box_reg: 0.1608  loss_mask: 0.1484  loss_rpn_cls: 0.0101  loss_rpn_loc: 0.05481    time: 0.9138  last_time: 0.8935  data_time: 0.2359  last_data_time: 0.1721   lr: 0.02  max_mem: 13042M
[03/01 20:28:28 d2.utils.events]:  eta: 0:02:25  iter: 1339  total_loss: 0.4585  loss_cls: 0.08044  loss_box_reg: 0.1669  loss_mask: 0.1508  loss_rpn_cls: 0.01082  loss_rpn_loc: 0.05177    time: 0.9142  last_time: 0.9573  data_time: 0.2011  last_data_time: 0.1605   lr: 0.02  max_mem: 13042M
[03/01 20:28:47 d2.utils.events]:  eta: 0:02:07  iter: 1359  total_loss: 0.4621  loss_cls: 0.08488  loss_box_reg: 0.1704  loss_mask: 0.1461  loss_rpn_cls: 0.01189  loss_rpn_loc: 0.05342    time: 0.9145  last_time: 1.0600  data_time: 0.2016  last_data_time: 0.3161   lr: 0.02  max_mem: 13042M
[03/01 20:29:05 d2.utils.events]:  eta: 0:01:49  iter: 1379  total_loss: 0.4654  loss_cls: 0.07977  loss_box_reg: 0.1651  loss_mask: 0.1567  loss_rpn_cls: 0.009798  loss_rpn_loc: 0.05423    time: 0.9147  last_time: 0.9625  data_time: 0.1884  last_data_time: 0.2089   lr: 0.02  max_mem: 13042M
[03/01 20:29:24 d2.utils.events]:  eta: 0:01:31  iter: 1399  total_loss: 0.4597  loss_cls: 0.08225  loss_box_reg: 0.1698  loss_mask: 0.1483  loss_rpn_cls: 0.01013  loss_rpn_loc: 0.05445    time: 0.9150  last_time: 0.9948  data_time: 0.1901  last_data_time: 0.2069   lr: 0.02  max_mem: 13042M
[03/01 20:29:43 d2.utils.events]:  eta: 0:01:13  iter: 1419  total_loss: 0.5044  loss_cls: 0.08475  loss_box_reg: 0.1689  loss_mask: 0.1542  loss_rpn_cls: 0.0148  loss_rpn_loc: 0.0635    time: 0.9151  last_time: 0.9276  data_time: 0.1869  last_data_time: 0.1944   lr: 0.02  max_mem: 13042M
[03/01 20:30:02 d2.utils.events]:  eta: 0:00:54  iter: 1439  total_loss: 0.4855  loss_cls: 0.08848  loss_box_reg: 0.175  loss_mask: 0.1509  loss_rpn_cls: 0.01088  loss_rpn_loc: 0.0618    time: 0.9156  last_time: 0.9611  data_time: 0.2044  last_data_time: 0.1964   lr: 0.02  max_mem: 13042M
[03/01 20:30:21 d2.utils.events]:  eta: 0:00:36  iter: 1459  total_loss: 0.4539  loss_cls: 0.08392  loss_box_reg: 0.1617  loss_mask: 0.1552  loss_rpn_cls: 0.01142  loss_rpn_loc: 0.05436    time: 0.9161  last_time: 0.8948  data_time: 0.1996  last_data_time: 0.1792   lr: 0.02  max_mem: 13042M
[03/01 20:30:39 d2.utils.events]:  eta: 0:00:18  iter: 1479  total_loss: 0.4738  loss_cls: 0.08844  loss_box_reg: 0.1613  loss_mask: 0.1559  loss_rpn_cls: 0.0106  loss_rpn_loc: 0.04666    time: 0.9163  last_time: 0.9691  data_time: 0.1731  last_data_time: 0.1728   lr: 0.02  max_mem: 13042M
[03/01 20:31:00 d2.utils.events]:  eta: 0:00:00  iter: 1499  total_loss: 0.4728  loss_cls: 0.08737  loss_box_reg: 0.1707  loss_mask: 0.1537  loss_rpn_cls: 0.01272  loss_rpn_loc: 0.05265    time: 0.9167  last_time: 0.9718  data_time: 0.2045  last_data_time: 0.2192   lr: 0.02  max_mem: 13042M
[03/01 20:31:00 d2.engine.hooks]: Overall training speed: 1498 iterations in 0:22:53 (0.9167 s / it)
[03/01 20:31:00 d2.engine.hooks]: Total training time: 0:23:05 (0:00:11 on hooks)
[03/01 20:31:02 d2.data.build]: Distribution of instances among all 11 categories:
|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
| background | 0            |    car     | 8021         | pedestrian | 3347         |
|            | 0            |            | 0            |            | 0            |
|            | 0            |            | 0            |            | 0            |
|            | 0            |   ignore   | 2765         |            |              |
|   total    | 14133        |            |              |            |              |
[03/01 20:31:02 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[03/01 20:31:02 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/01 20:31:02 d2.data.common]: Serializing 2919 elements to byte tensors and concatenating them all ...
[03/01 20:31:03 d2.data.common]: Serialized dataset takes 5.86 MiB
WARNING [03/01 20:31:03 d2.engine.defaults]: No evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
[03/01 20:31:03 d2.checkpoint.detection_checkpoint]: [DetectionCheckpointer] Loading from /ghome/group07/C5-W2/lr_0_02_bs_32_is_12/model_0001499.pth ...
[03/01 20:31:06 d2.evaluation.coco_evaluation]: Trying to convert 'KITTI-MOTS_val' to COCO format ...
[03/01 20:31:06 d2.data.datasets.coco]: Converting annotations of dataset 'KITTI-MOTS_val' to COCO format ...)
[03/01 20:31:12 d2.data.datasets.coco]: Converting dataset dicts into COCO format
[03/01 20:31:12 d2.data.datasets.coco]: Conversion finished, #images: 2919, #annotations: 14133
[03/01 20:31:12 d2.data.datasets.coco]: Caching COCO format annotations at '/ghome/group07/C5-W2/lr_0_02_bs_32_is_12/KITTI-MOTS_val_coco_format.json' ...
[03/01 20:31:14 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[03/01 20:31:14 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/01 20:31:14 d2.data.common]: Serializing 2919 elements to byte tensors and concatenating them all ...
[03/01 20:31:14 d2.data.common]: Serialized dataset takes 5.86 MiB
[03/01 20:31:15 d2.evaluation.evaluator]: Start inference on 2919 batches
[03/01 20:31:17 d2.evaluation.evaluator]: Inference done 11/2919. Dataloading: 0.0019 s/iter. Inference: 0.0479 s/iter. Eval: 0.0027 s/iter. Total: 0.0525 s/iter. ETA=0:02:32
[03/01 20:31:22 d2.evaluation.evaluator]: Inference done 102/2919. Dataloading: 0.0026 s/iter. Inference: 0.0502 s/iter. Eval: 0.0021 s/iter. Total: 0.0549 s/iter. ETA=0:02:34
[03/01 20:31:27 d2.evaluation.evaluator]: Inference done 191/2919. Dataloading: 0.0025 s/iter. Inference: 0.0509 s/iter. Eval: 0.0021 s/iter. Total: 0.0555 s/iter. ETA=0:02:31
[03/01 20:31:32 d2.evaluation.evaluator]: Inference done 283/2919. Dataloading: 0.0026 s/iter. Inference: 0.0506 s/iter. Eval: 0.0020 s/iter. Total: 0.0551 s/iter. ETA=0:02:25
[03/01 20:31:37 d2.evaluation.evaluator]: Inference done 375/2919. Dataloading: 0.0025 s/iter. Inference: 0.0504 s/iter. Eval: 0.0019 s/iter. Total: 0.0550 s/iter. ETA=0:02:19
[03/01 20:31:42 d2.evaluation.evaluator]: Inference done 465/2919. Dataloading: 0.0026 s/iter. Inference: 0.0506 s/iter. Eval: 0.0019 s/iter. Total: 0.0552 s/iter. ETA=0:02:15
[03/01 20:31:47 d2.evaluation.evaluator]: Inference done 545/2919. Dataloading: 0.0027 s/iter. Inference: 0.0516 s/iter. Eval: 0.0019 s/iter. Total: 0.0563 s/iter. ETA=0:02:13
[03/01 20:31:52 d2.evaluation.evaluator]: Inference done 634/2919. Dataloading: 0.0027 s/iter. Inference: 0.0516 s/iter. Eval: 0.0019 s/iter. Total: 0.0563 s/iter. ETA=0:02:08
[03/01 20:31:57 d2.evaluation.evaluator]: Inference done 723/2919. Dataloading: 0.0027 s/iter. Inference: 0.0515 s/iter. Eval: 0.0021 s/iter. Total: 0.0563 s/iter. ETA=0:02:03
[03/01 20:32:02 d2.evaluation.evaluator]: Inference done 815/2919. Dataloading: 0.0027 s/iter. Inference: 0.0513 s/iter. Eval: 0.0021 s/iter. Total: 0.0562 s/iter. ETA=0:01:58
[03/01 20:32:07 d2.evaluation.evaluator]: Inference done 907/2919. Dataloading: 0.0027 s/iter. Inference: 0.0511 s/iter. Eval: 0.0022 s/iter. Total: 0.0560 s/iter. ETA=0:01:52
[03/01 20:32:12 d2.evaluation.evaluator]: Inference done 996/2919. Dataloading: 0.0027 s/iter. Inference: 0.0511 s/iter. Eval: 0.0022 s/iter. Total: 0.0561 s/iter. ETA=0:01:47
[03/01 20:32:17 d2.evaluation.evaluator]: Inference done 1084/2919. Dataloading: 0.0027 s/iter. Inference: 0.0512 s/iter. Eval: 0.0023 s/iter. Total: 0.0562 s/iter. ETA=0:01:43
[03/01 20:32:22 d2.evaluation.evaluator]: Inference done 1173/2919. Dataloading: 0.0027 s/iter. Inference: 0.0511 s/iter. Eval: 0.0023 s/iter. Total: 0.0562 s/iter. ETA=0:01:38
[03/01 20:32:27 d2.evaluation.evaluator]: Inference done 1262/2919. Dataloading: 0.0027 s/iter. Inference: 0.0511 s/iter. Eval: 0.0024 s/iter. Total: 0.0562 s/iter. ETA=0:01:33
[03/01 20:32:32 d2.evaluation.evaluator]: Inference done 1353/2919. Dataloading: 0.0027 s/iter. Inference: 0.0510 s/iter. Eval: 0.0024 s/iter. Total: 0.0561 s/iter. ETA=0:01:27
[03/01 20:32:37 d2.evaluation.evaluator]: Inference done 1441/2919. Dataloading: 0.0027 s/iter. Inference: 0.0510 s/iter. Eval: 0.0024 s/iter. Total: 0.0562 s/iter. ETA=0:01:23
[03/01 20:32:42 d2.evaluation.evaluator]: Inference done 1532/2919. Dataloading: 0.0027 s/iter. Inference: 0.0510 s/iter. Eval: 0.0024 s/iter. Total: 0.0561 s/iter. ETA=0:01:17
[03/01 20:32:47 d2.evaluation.evaluator]: Inference done 1623/2919. Dataloading: 0.0027 s/iter. Inference: 0.0509 s/iter. Eval: 0.0024 s/iter. Total: 0.0561 s/iter. ETA=0:01:12
[03/01 20:32:52 d2.evaluation.evaluator]: Inference done 1713/2919. Dataloading: 0.0027 s/iter. Inference: 0.0509 s/iter. Eval: 0.0024 s/iter. Total: 0.0561 s/iter. ETA=0:01:07
[03/01 20:32:57 d2.evaluation.evaluator]: Inference done 1800/2919. Dataloading: 0.0027 s/iter. Inference: 0.0510 s/iter. Eval: 0.0024 s/iter. Total: 0.0562 s/iter. ETA=0:01:02
[03/01 20:33:02 d2.evaluation.evaluator]: Inference done 1874/2919. Dataloading: 0.0027 s/iter. Inference: 0.0514 s/iter. Eval: 0.0025 s/iter. Total: 0.0566 s/iter. ETA=0:00:59
[03/01 20:33:07 d2.evaluation.evaluator]: Inference done 1962/2919. Dataloading: 0.0027 s/iter. Inference: 0.0513 s/iter. Eval: 0.0025 s/iter. Total: 0.0566 s/iter. ETA=0:00:54
[03/01 20:33:12 d2.evaluation.evaluator]: Inference done 2053/2919. Dataloading: 0.0027 s/iter. Inference: 0.0512 s/iter. Eval: 0.0025 s/iter. Total: 0.0566 s/iter. ETA=0:00:48
[03/01 20:33:17 d2.evaluation.evaluator]: Inference done 2129/2919. Dataloading: 0.0027 s/iter. Inference: 0.0515 s/iter. Eval: 0.0026 s/iter. Total: 0.0569 s/iter. ETA=0:00:44
[03/01 20:33:23 d2.evaluation.evaluator]: Inference done 2197/2919. Dataloading: 0.0027 s/iter. Inference: 0.0520 s/iter. Eval: 0.0026 s/iter. Total: 0.0574 s/iter. ETA=0:00:41
[03/01 20:33:28 d2.evaluation.evaluator]: Inference done 2267/2919. Dataloading: 0.0028 s/iter. Inference: 0.0525 s/iter. Eval: 0.0026 s/iter. Total: 0.0579 s/iter. ETA=0:00:37
[03/01 20:33:33 d2.evaluation.evaluator]: Inference done 2353/2919. Dataloading: 0.0027 s/iter. Inference: 0.0524 s/iter. Eval: 0.0026 s/iter. Total: 0.0579 s/iter. ETA=0:00:32
[03/01 20:33:38 d2.evaluation.evaluator]: Inference done 2421/2919. Dataloading: 0.0027 s/iter. Inference: 0.0528 s/iter. Eval: 0.0028 s/iter. Total: 0.0584 s/iter. ETA=0:00:29
[03/01 20:33:43 d2.evaluation.evaluator]: Inference done 2485/2919. Dataloading: 0.0027 s/iter. Inference: 0.0532 s/iter. Eval: 0.0029 s/iter. Total: 0.0589 s/iter. ETA=0:00:25
[03/01 20:33:48 d2.evaluation.evaluator]: Inference done 2568/2919. Dataloading: 0.0027 s/iter. Inference: 0.0531 s/iter. Eval: 0.0030 s/iter. Total: 0.0589 s/iter. ETA=0:00:20
[03/01 20:33:53 d2.evaluation.evaluator]: Inference done 2657/2919. Dataloading: 0.0027 s/iter. Inference: 0.0530 s/iter. Eval: 0.0031 s/iter. Total: 0.0588 s/iter. ETA=0:00:15
[03/01 20:33:58 d2.evaluation.evaluator]: Inference done 2747/2919. Dataloading: 0.0027 s/iter. Inference: 0.0529 s/iter. Eval: 0.0030 s/iter. Total: 0.0587 s/iter. ETA=0:00:10
[03/01 20:34:03 d2.evaluation.evaluator]: Inference done 2834/2919. Dataloading: 0.0027 s/iter. Inference: 0.0529 s/iter. Eval: 0.0031 s/iter. Total: 0.0587 s/iter. ETA=0:00:04
[03/01 20:34:08 d2.evaluation.evaluator]: Total inference time: 0:02:51.095972 (0.058715 s / iter per device, on 1 devices)
[03/01 20:34:08 d2.evaluation.evaluator]: Total inference pure compute time: 0:02:33 (0.052837 s / iter per device, on 1 devices)
[03/01 20:34:08 d2.evaluation.coco_evaluation]: Preparing results for COCO format ...
[03/01 20:34:08 d2.evaluation.coco_evaluation]: Saving results to /ghome/group07/C5-W2/lr_0_02_bs_32_is_12/coco_instances_results.json
[03/01 20:34:08 d2.evaluation.coco_evaluation]: Evaluating predictions with unofficial COCO API...
Loading and preparing results...
DONE (t=0.01s)
creating index...
index created!
[03/01 20:34:08 d2.evaluation.fast_eval_api]: Evaluate annotation type *bbox*
[03/01 20:34:09 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 0.50 seconds.
[03/01 20:34:09 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[03/01 20:34:09 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.08 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.410
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.587
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.461
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.252
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.485
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.551
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.166
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.461
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.463
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.292
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.522
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.673
[03/01 20:34:09 d2.evaluation.coco_evaluation]: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 40.998 | 58.713 | 46.133 | 25.217 | 48.469 | 55.138 |
[03/01 20:34:09 d2.evaluation.coco_evaluation]: Per-category bbox AP: 
| category   | AP   | category   | AP     | category   | AP     |
|:-----------|:-----|:-----------|:-------|:-----------|:-------|
| background | nan  | car        | 66.211 | pedestrian | 51.472 |
|            | nan  |            | nan    |            | nan    |
|            | nan  |            | nan    |            | nan    |
|            | nan  | ignore     | 5.312  |            |        |
Loading and preparing results...
DONE (t=0.13s)
creating index...
index created!
[03/01 20:34:09 d2.evaluation.fast_eval_api]: Evaluate annotation type *segm*
[03/01 20:34:10 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 0.96 seconds.
[03/01 20:34:10 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[03/01 20:34:10 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.08 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.371
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.553
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.412
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.200
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.438
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.560
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.150
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.416
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.417
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.252
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.472
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.616
[03/01 20:34:10 d2.evaluation.coco_evaluation]: Evaluation results for segm: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 37.071 | 55.263 | 41.183 | 20.006 | 43.838 | 55.996 |
[03/01 20:34:10 d2.evaluation.coco_evaluation]: Per-category segm AP: 
| category   | AP   | category   | AP     | category   | AP     |
|:-----------|:-----|:-----------|:-------|:-----------|:-------|
| background | nan  | car        | 66.738 | pedestrian | 39.963 |
|            | nan  |            | nan    |            | nan    |
|            | nan  |            | nan    |            | nan    |
|            | nan  | ignore     | 4.513  |            |        |
OrderedDict([('bbox', {'AP': 40.99812797977521, 'AP50': 58.71321371499463, 'AP75': 46.13274864885953, 'APs': 25.21740556837871, 'APm': 48.46931211130585, 'APl': 55.13759565409495, 'AP-background': nan, 'AP-car': 66.21053499705766, 'AP-pedestrian': 51.47228154657327, 'AP-': nan, 'AP-ignore': 5.311567395694679}), ('segm', {'AP': 37.07133780205007, 'AP50': 55.26315578647878, 'AP75': 41.18275497962473, 'APs': 20.006392943964183, 'APm': 43.83755908682836, 'APl': 55.99614537161967, 'AP-background': nan, 'AP-car': 66.73782722490915, 'AP-pedestrian': 39.96287866869391, 'AP-': nan, 'AP-ignore': 4.513307512547131})])
