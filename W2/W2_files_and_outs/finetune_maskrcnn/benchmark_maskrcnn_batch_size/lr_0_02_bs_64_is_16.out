1
The device we will be working on is: cuda
[03/01 18:58:25 d2.engine.defaults]: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=12, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=44, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 11, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[03/01 18:58:29 d2.data.build]: Removed 0 images with no usable annotations. 5007 images left.
[03/01 18:58:29 d2.data.build]: Distribution of instances among all 11 categories:
|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
| background | 0            |    car     | 18822        | pedestrian | 8065         |
|            | 0            |            | 0            |            | 0            |
|            | 0            |            | 0            |            | 0            |
|            | 0            |   ignore   | 4977         |            |              |
|   total    | 31864        |            |              |            |              |
[03/01 18:58:29 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[03/01 18:58:29 d2.data.build]: Using training sampler TrainingSampler
[03/01 18:58:29 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/01 18:58:29 d2.data.common]: Serializing 5007 elements to byte tensors and concatenating them all ...
[03/01 18:58:29 d2.data.common]: Serialized dataset takes 13.56 MiB
[03/01 18:58:29 d2.data.build]: Making batched data loader with batch_size=16
WARNING [03/01 18:58:29 d2.solver.build]: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[03/01 18:58:29 d2.checkpoint.detection_checkpoint]: [DetectionCheckpointer] Loading from https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl ...
[03/01 18:58:29 d2.engine.train_loop]: Starting training from iteration 0
[03/01 18:59:09 d2.utils.events]:  eta: 0:30:14  iter: 19  total_loss: 3.269  loss_cls: 1.928  loss_box_reg: 0.4959  loss_mask: 0.6628  loss_rpn_cls: 0.1483  loss_rpn_loc: 0.07512    time: 1.3930  last_time: 1.2504  data_time: 0.7665  last_data_time: 0.3498   lr: 0.00039962  max_mem: 15749M
[03/01 18:59:44 d2.utils.events]:  eta: 0:29:52  iter: 39  total_loss: 1.56  loss_cls: 0.4808  loss_box_reg: 0.4439  loss_mask: 0.4485  loss_rpn_cls: 0.06774  loss_rpn_loc: 0.0772    time: 1.3501  last_time: 1.1695  data_time: 0.4093  last_data_time: 0.2679   lr: 0.00079922  max_mem: 16202M
[03/01 19:00:15 d2.utils.events]:  eta: 0:29:49  iter: 59  total_loss: 1.126  loss_cls: 0.2859  loss_box_reg: 0.4009  loss_mask: 0.3225  loss_rpn_cls: 0.04429  loss_rpn_loc: 0.07653    time: 1.4190  last_time: 1.2924  data_time: 0.4312  last_data_time: 0.3387   lr: 0.0011988  max_mem: 16202M
[03/01 19:00:40 d2.utils.events]:  eta: 0:29:14  iter: 79  total_loss: 0.8844  loss_cls: 0.2075  loss_box_reg: 0.2862  loss_mask: 0.2734  loss_rpn_cls: 0.04321  loss_rpn_loc: 0.07721    time: 1.3748  last_time: 1.3018  data_time: 0.3471  last_data_time: 0.3855   lr: 0.0015984  max_mem: 16202M
[03/01 19:01:05 d2.utils.events]:  eta: 0:28:39  iter: 99  total_loss: 0.8365  loss_cls: 0.1895  loss_box_reg: 0.2788  loss_mask: 0.2649  loss_rpn_cls: 0.03794  loss_rpn_loc: 0.07433    time: 1.3500  last_time: 1.3297  data_time: 0.3498  last_data_time: 0.3913   lr: 0.001998  max_mem: 16202M
[03/01 19:01:29 d2.utils.events]:  eta: 0:28:21  iter: 119  total_loss: 0.7216  loss_cls: 0.149  loss_box_reg: 0.2199  loss_mask: 0.2469  loss_rpn_cls: 0.03594  loss_rpn_loc: 0.07267    time: 1.3297  last_time: 1.1949  data_time: 0.3327  last_data_time: 0.3182   lr: 0.0023976  max_mem: 16202M
[03/01 19:01:54 d2.utils.events]:  eta: 0:27:44  iter: 139  total_loss: 0.6851  loss_cls: 0.1439  loss_box_reg: 0.2136  loss_mask: 0.243  loss_rpn_cls: 0.03258  loss_rpn_loc: 0.07207    time: 1.3125  last_time: 1.1683  data_time: 0.3228  last_data_time: 0.2963   lr: 0.0027972  max_mem: 16202M
[03/01 19:02:18 d2.utils.events]:  eta: 0:27:19  iter: 159  total_loss: 0.6527  loss_cls: 0.1347  loss_box_reg: 0.2074  loss_mask: 0.228  loss_rpn_cls: 0.02869  loss_rpn_loc: 0.06828    time: 1.3022  last_time: 1.1277  data_time: 0.3299  last_data_time: 0.2724   lr: 0.0031968  max_mem: 16202M
[03/01 19:02:43 d2.utils.events]:  eta: 0:26:56  iter: 179  total_loss: 0.6999  loss_cls: 0.1415  loss_box_reg: 0.2029  loss_mask: 0.2294  loss_rpn_cls: 0.02963  loss_rpn_loc: 0.07532    time: 1.2958  last_time: 1.2088  data_time: 0.3424  last_data_time: 0.2981   lr: 0.0035964  max_mem: 16202M
[03/01 19:03:08 d2.utils.events]:  eta: 0:26:34  iter: 199  total_loss: 0.6377  loss_cls: 0.1316  loss_box_reg: 0.2012  loss_mask: 0.2173  loss_rpn_cls: 0.02672  loss_rpn_loc: 0.06449    time: 1.2886  last_time: 1.2444  data_time: 0.3162  last_data_time: 0.2976   lr: 0.003996  max_mem: 16202M
[03/01 19:03:32 d2.utils.events]:  eta: 0:26:07  iter: 219  total_loss: 0.6454  loss_cls: 0.1319  loss_box_reg: 0.2023  loss_mask: 0.2168  loss_rpn_cls: 0.02802  loss_rpn_loc: 0.06945    time: 1.2843  last_time: 1.2418  data_time: 0.3252  last_data_time: 0.3463   lr: 0.0043956  max_mem: 16202M
[03/01 19:03:57 d2.utils.events]:  eta: 0:25:37  iter: 239  total_loss: 0.64  loss_cls: 0.126  loss_box_reg: 0.1885  loss_mask: 0.2122  loss_rpn_cls: 0.0254  loss_rpn_loc: 0.07525    time: 1.2777  last_time: 1.1842  data_time: 0.3116  last_data_time: 0.3024   lr: 0.0047952  max_mem: 16202M
[03/01 19:04:21 d2.utils.events]:  eta: 0:25:11  iter: 259  total_loss: 0.6374  loss_cls: 0.1286  loss_box_reg: 0.1887  loss_mask: 0.2174  loss_rpn_cls: 0.02544  loss_rpn_loc: 0.06882    time: 1.2718  last_time: 1.2005  data_time: 0.3000  last_data_time: 0.2993   lr: 0.0051948  max_mem: 16202M
[03/01 19:04:45 d2.utils.events]:  eta: 0:24:47  iter: 279  total_loss: 0.6504  loss_cls: 0.14  loss_box_reg: 0.2057  loss_mask: 0.2075  loss_rpn_cls: 0.0257  loss_rpn_loc: 0.07184    time: 1.2699  last_time: 1.1925  data_time: 0.3257  last_data_time: 0.2894   lr: 0.0055944  max_mem: 16202M
[03/01 19:05:11 d2.utils.events]:  eta: 0:24:26  iter: 299  total_loss: 0.6531  loss_cls: 0.1371  loss_box_reg: 0.2025  loss_mask: 0.2093  loss_rpn_cls: 0.02213  loss_rpn_loc: 0.06901    time: 1.2687  last_time: 1.2561  data_time: 0.3279  last_data_time: 0.3177   lr: 0.005994  max_mem: 16202M
[03/01 19:05:35 d2.utils.events]:  eta: 0:23:59  iter: 319  total_loss: 0.6117  loss_cls: 0.1269  loss_box_reg: 0.1899  loss_mask: 0.1995  loss_rpn_cls: 0.02086  loss_rpn_loc: 0.06565    time: 1.2660  last_time: 1.2021  data_time: 0.3045  last_data_time: 0.2876   lr: 0.0063936  max_mem: 16374M
[03/01 19:06:00 d2.utils.events]:  eta: 0:23:34  iter: 339  total_loss: 0.5877  loss_cls: 0.1234  loss_box_reg: 0.1884  loss_mask: 0.1979  loss_rpn_cls: 0.02337  loss_rpn_loc: 0.06431    time: 1.2638  last_time: 1.1895  data_time: 0.3230  last_data_time: 0.2985   lr: 0.0067932  max_mem: 16374M
[03/01 19:06:25 d2.utils.events]:  eta: 0:23:11  iter: 359  total_loss: 0.6297  loss_cls: 0.1238  loss_box_reg: 0.2016  loss_mask: 0.2059  loss_rpn_cls: 0.02306  loss_rpn_loc: 0.07008    time: 1.2636  last_time: 1.1691  data_time: 0.3495  last_data_time: 0.2812   lr: 0.0071928  max_mem: 16374M
[03/01 19:06:50 d2.utils.events]:  eta: 0:22:49  iter: 379  total_loss: 0.6123  loss_cls: 0.1242  loss_box_reg: 0.1924  loss_mask: 0.1883  loss_rpn_cls: 0.02248  loss_rpn_loc: 0.06947    time: 1.2626  last_time: 1.2552  data_time: 0.3168  last_data_time: 0.3090   lr: 0.0075924  max_mem: 16374M
[03/01 19:07:15 d2.utils.events]:  eta: 0:22:26  iter: 399  total_loss: 0.6248  loss_cls: 0.1273  loss_box_reg: 0.2087  loss_mask: 0.1997  loss_rpn_cls: 0.01924  loss_rpn_loc: 0.07259    time: 1.2624  last_time: 1.2567  data_time: 0.3250  last_data_time: 0.3172   lr: 0.007992  max_mem: 16374M
[03/01 19:07:40 d2.utils.events]:  eta: 0:22:03  iter: 419  total_loss: 0.5754  loss_cls: 0.12  loss_box_reg: 0.1895  loss_mask: 0.1811  loss_rpn_cls: 0.02058  loss_rpn_loc: 0.06672    time: 1.2618  last_time: 1.2818  data_time: 0.3228  last_data_time: 0.3219   lr: 0.0083916  max_mem: 16374M
[03/01 19:08:04 d2.utils.events]:  eta: 0:21:39  iter: 439  total_loss: 0.5683  loss_cls: 0.1165  loss_box_reg: 0.1829  loss_mask: 0.1843  loss_rpn_cls: 0.01821  loss_rpn_loc: 0.06997    time: 1.2606  last_time: 1.2331  data_time: 0.3195  last_data_time: 0.3222   lr: 0.0087912  max_mem: 16374M
[03/01 19:08:29 d2.utils.events]:  eta: 0:21:14  iter: 459  total_loss: 0.566  loss_cls: 0.1132  loss_box_reg: 0.1888  loss_mask: 0.1834  loss_rpn_cls: 0.01872  loss_rpn_loc: 0.05678    time: 1.2591  last_time: 1.1660  data_time: 0.3111  last_data_time: 0.2650   lr: 0.0091908  max_mem: 16374M
[03/01 19:08:53 d2.utils.events]:  eta: 0:20:51  iter: 479  total_loss: 0.579  loss_cls: 0.1099  loss_box_reg: 0.1768  loss_mask: 0.1823  loss_rpn_cls: 0.02116  loss_rpn_loc: 0.06522    time: 1.2581  last_time: 1.4062  data_time: 0.3227  last_data_time: 0.4783   lr: 0.0095904  max_mem: 16374M
[03/01 19:09:20 d2.utils.events]:  eta: 0:20:28  iter: 499  total_loss: 0.5873  loss_cls: 0.1139  loss_box_reg: 0.1926  loss_mask: 0.192  loss_rpn_cls: 0.01752  loss_rpn_loc: 0.05781    time: 1.2582  last_time: 1.2619  data_time: 0.3361  last_data_time: 0.3297   lr: 0.00999  max_mem: 16374M
[03/01 19:09:45 d2.utils.events]:  eta: 0:20:06  iter: 519  total_loss: 0.5685  loss_cls: 0.1169  loss_box_reg: 0.1868  loss_mask: 0.1846  loss_rpn_cls: 0.0189  loss_rpn_loc: 0.06175    time: 1.2584  last_time: 1.2853  data_time: 0.3279  last_data_time: 0.3627   lr: 0.01039  max_mem: 16374M
[03/01 19:10:10 d2.utils.events]:  eta: 0:19:41  iter: 539  total_loss: 0.5647  loss_cls: 0.1258  loss_box_reg: 0.1901  loss_mask: 0.1805  loss_rpn_cls: 0.01854  loss_rpn_loc: 0.05515    time: 1.2577  last_time: 1.1870  data_time: 0.3080  last_data_time: 0.2759   lr: 0.010789  max_mem: 16374M
[03/01 19:10:35 d2.utils.events]:  eta: 0:19:18  iter: 559  total_loss: 0.5697  loss_cls: 0.115  loss_box_reg: 0.1843  loss_mask: 0.1877  loss_rpn_cls: 0.0194  loss_rpn_loc: 0.06324    time: 1.2581  last_time: 1.2336  data_time: 0.3296  last_data_time: 0.3045   lr: 0.011189  max_mem: 16483M
[03/01 19:11:01 d2.utils.events]:  eta: 0:18:53  iter: 579  total_loss: 0.5859  loss_cls: 0.1116  loss_box_reg: 0.1917  loss_mask: 0.1921  loss_rpn_cls: 0.02054  loss_rpn_loc: 0.06404    time: 1.2594  last_time: 1.2009  data_time: 0.3457  last_data_time: 0.3054   lr: 0.011588  max_mem: 16649M
[03/01 19:11:28 d2.utils.events]:  eta: 0:18:29  iter: 599  total_loss: 0.5607  loss_cls: 0.1043  loss_box_reg: 0.1885  loss_mask: 0.1844  loss_rpn_cls: 0.0162  loss_rpn_loc: 0.05669    time: 1.2618  last_time: 1.4298  data_time: 0.3655  last_data_time: 0.4048   lr: 0.011988  max_mem: 16649M
[03/01 19:11:58 d2.utils.events]:  eta: 0:18:07  iter: 619  total_loss: 0.5467  loss_cls: 0.1113  loss_box_reg: 0.1832  loss_mask: 0.1836  loss_rpn_cls: 0.01677  loss_rpn_loc: 0.05751    time: 1.2696  last_time: 1.4506  data_time: 0.4719  last_data_time: 0.4551   lr: 0.012388  max_mem: 16649M
[03/01 19:12:23 d2.utils.events]:  eta: 0:17:43  iter: 639  total_loss: 0.5416  loss_cls: 0.1026  loss_box_reg: 0.1855  loss_mask: 0.1732  loss_rpn_cls: 0.01369  loss_rpn_loc: 0.05631    time: 1.2699  last_time: 1.2984  data_time: 0.3432  last_data_time: 0.3732   lr: 0.012787  max_mem: 16649M
[03/01 19:12:49 d2.utils.events]:  eta: 0:17:20  iter: 659  total_loss: 0.5844  loss_cls: 0.1137  loss_box_reg: 0.2062  loss_mask: 0.1837  loss_rpn_cls: 0.01415  loss_rpn_loc: 0.0591    time: 1.2701  last_time: 1.2840  data_time: 0.3290  last_data_time: 0.3430   lr: 0.013187  max_mem: 16649M
[03/01 19:13:14 d2.utils.events]:  eta: 0:16:56  iter: 679  total_loss: 0.5229  loss_cls: 0.1037  loss_box_reg: 0.1749  loss_mask: 0.1761  loss_rpn_cls: 0.01535  loss_rpn_loc: 0.05792    time: 1.2704  last_time: 1.1707  data_time: 0.3392  last_data_time: 0.2626   lr: 0.013586  max_mem: 16649M
[03/01 19:13:40 d2.utils.events]:  eta: 0:16:33  iter: 699  total_loss: 0.5312  loss_cls: 0.1027  loss_box_reg: 0.1816  loss_mask: 0.1661  loss_rpn_cls: 0.01524  loss_rpn_loc: 0.06215    time: 1.2703  last_time: 1.2396  data_time: 0.3070  last_data_time: 0.2929   lr: 0.013986  max_mem: 16649M
[03/01 19:14:05 d2.utils.events]:  eta: 0:16:08  iter: 719  total_loss: 0.5531  loss_cls: 0.1109  loss_box_reg: 0.1856  loss_mask: 0.1759  loss_rpn_cls: 0.01829  loss_rpn_loc: 0.05962    time: 1.2703  last_time: 1.3106  data_time: 0.3181  last_data_time: 0.3643   lr: 0.014386  max_mem: 16649M
[03/01 19:14:31 d2.utils.events]:  eta: 0:15:44  iter: 739  total_loss: 0.5534  loss_cls: 0.1041  loss_box_reg: 0.1781  loss_mask: 0.1721  loss_rpn_cls: 0.01699  loss_rpn_loc: 0.06171    time: 1.2709  last_time: 1.7013  data_time: 0.3446  last_data_time: 0.7120   lr: 0.014785  max_mem: 16748M
[03/01 19:14:56 d2.utils.events]:  eta: 0:15:19  iter: 759  total_loss: 0.5366  loss_cls: 0.1012  loss_box_reg: 0.1806  loss_mask: 0.1735  loss_rpn_cls: 0.01437  loss_rpn_loc: 0.06094    time: 1.2708  last_time: 1.2365  data_time: 0.3207  last_data_time: 0.2903   lr: 0.015185  max_mem: 16748M
[03/01 19:15:21 d2.utils.events]:  eta: 0:14:54  iter: 779  total_loss: 0.4882  loss_cls: 0.09282  loss_box_reg: 0.1553  loss_mask: 0.1632  loss_rpn_cls: 0.01347  loss_rpn_loc: 0.05321    time: 1.2698  last_time: 1.2450  data_time: 0.3123  last_data_time: 0.3179   lr: 0.015584  max_mem: 16748M
[03/01 19:15:47 d2.utils.events]:  eta: 0:14:30  iter: 799  total_loss: 0.5538  loss_cls: 0.1042  loss_box_reg: 0.1982  loss_mask: 0.185  loss_rpn_cls: 0.01633  loss_rpn_loc: 0.06689    time: 1.2706  last_time: 1.2840  data_time: 0.3473  last_data_time: 0.2958   lr: 0.015984  max_mem: 16748M
[03/01 19:16:13 d2.utils.events]:  eta: 0:14:06  iter: 819  total_loss: 0.532  loss_cls: 0.09807  loss_box_reg: 0.179  loss_mask: 0.174  loss_rpn_cls: 0.01493  loss_rpn_loc: 0.06262    time: 1.2706  last_time: 1.3391  data_time: 0.3138  last_data_time: 0.3656   lr: 0.016384  max_mem: 16748M
[03/01 19:16:38 d2.utils.events]:  eta: 0:13:41  iter: 839  total_loss: 0.5013  loss_cls: 0.0947  loss_box_reg: 0.1725  loss_mask: 0.1686  loss_rpn_cls: 0.01542  loss_rpn_loc: 0.05508    time: 1.2703  last_time: 1.2354  data_time: 0.3105  last_data_time: 0.3041   lr: 0.016783  max_mem: 16949M
[03/01 19:17:03 d2.utils.events]:  eta: 0:13:16  iter: 859  total_loss: 0.5059  loss_cls: 0.091  loss_box_reg: 0.1717  loss_mask: 0.1669  loss_rpn_cls: 0.01329  loss_rpn_loc: 0.05177    time: 1.2705  last_time: 1.2351  data_time: 0.3275  last_data_time: 0.2961   lr: 0.017183  max_mem: 16949M
[03/01 19:17:29 d2.utils.events]:  eta: 0:12:52  iter: 879  total_loss: 0.5166  loss_cls: 0.09298  loss_box_reg: 0.1842  loss_mask: 0.1678  loss_rpn_cls: 0.01199  loss_rpn_loc: 0.05257    time: 1.2705  last_time: 1.2678  data_time: 0.3227  last_data_time: 0.2938   lr: 0.017582  max_mem: 16949M
[03/01 19:17:54 d2.utils.events]:  eta: 0:12:28  iter: 899  total_loss: 0.535  loss_cls: 0.1021  loss_box_reg: 0.1878  loss_mask: 0.1668  loss_rpn_cls: 0.01326  loss_rpn_loc: 0.06494    time: 1.2708  last_time: 1.3041  data_time: 0.3192  last_data_time: 0.3381   lr: 0.017982  max_mem: 16949M
[03/01 19:18:20 d2.utils.events]:  eta: 0:12:03  iter: 919  total_loss: 0.5056  loss_cls: 0.09823  loss_box_reg: 0.1779  loss_mask: 0.1587  loss_rpn_cls: 0.01218  loss_rpn_loc: 0.05793    time: 1.2709  last_time: 1.3166  data_time: 0.3175  last_data_time: 0.3553   lr: 0.018382  max_mem: 16949M
[03/01 19:18:45 d2.utils.events]:  eta: 0:11:39  iter: 939  total_loss: 0.544  loss_cls: 0.1007  loss_box_reg: 0.1841  loss_mask: 0.1716  loss_rpn_cls: 0.01714  loss_rpn_loc: 0.06322    time: 1.2710  last_time: 1.2907  data_time: 0.3320  last_data_time: 0.3320   lr: 0.018781  max_mem: 16949M
[03/01 19:19:11 d2.utils.events]:  eta: 0:11:14  iter: 959  total_loss: 0.5002  loss_cls: 0.09964  loss_box_reg: 0.178  loss_mask: 0.1607  loss_rpn_cls: 0.01201  loss_rpn_loc: 0.05509    time: 1.2710  last_time: 1.2098  data_time: 0.3041  last_data_time: 0.2857   lr: 0.019181  max_mem: 16949M
[03/01 19:19:37 d2.utils.events]:  eta: 0:10:50  iter: 979  total_loss: 0.5061  loss_cls: 0.09805  loss_box_reg: 0.1758  loss_mask: 0.1633  loss_rpn_cls: 0.01144  loss_rpn_loc: 0.05493    time: 1.2715  last_time: 1.3191  data_time: 0.3341  last_data_time: 0.3223   lr: 0.01958  max_mem: 16949M
[03/01 19:20:04 d2.utils.events]:  eta: 0:10:25  iter: 999  total_loss: 0.5093  loss_cls: 0.09929  loss_box_reg: 0.1893  loss_mask: 0.1534  loss_rpn_cls: 0.01165  loss_rpn_loc: 0.06277    time: 1.2724  last_time: 1.3417  data_time: 0.3399  last_data_time: 0.3806   lr: 0.01998  max_mem: 16949M
[03/01 19:20:30 d2.utils.events]:  eta: 0:10:01  iter: 1019  total_loss: 0.4954  loss_cls: 0.08829  loss_box_reg: 0.1734  loss_mask: 0.1564  loss_rpn_cls: 0.01267  loss_rpn_loc: 0.05548    time: 1.2729  last_time: 1.2492  data_time: 0.3331  last_data_time: 0.2785   lr: 0.02  max_mem: 16949M
[03/01 19:20:55 d2.utils.events]:  eta: 0:09:36  iter: 1039  total_loss: 0.4688  loss_cls: 0.08512  loss_box_reg: 0.1606  loss_mask: 0.1567  loss_rpn_cls: 0.01203  loss_rpn_loc: 0.05223    time: 1.2727  last_time: 1.2378  data_time: 0.3045  last_data_time: 0.2656   lr: 0.02  max_mem: 16949M
[03/01 19:21:21 d2.utils.events]:  eta: 0:09:11  iter: 1059  total_loss: 0.4959  loss_cls: 0.09274  loss_box_reg: 0.1748  loss_mask: 0.1641  loss_rpn_cls: 0.01258  loss_rpn_loc: 0.05624    time: 1.2726  last_time: 1.2747  data_time: 0.3028  last_data_time: 0.3024   lr: 0.02  max_mem: 16949M
[03/01 19:21:46 d2.utils.events]:  eta: 0:08:47  iter: 1079  total_loss: 0.4678  loss_cls: 0.08562  loss_box_reg: 0.16  loss_mask: 0.1569  loss_rpn_cls: 0.01105  loss_rpn_loc: 0.04909    time: 1.2730  last_time: 1.3154  data_time: 0.3352  last_data_time: 0.3279   lr: 0.02  max_mem: 16949M
[03/01 19:22:12 d2.utils.events]:  eta: 0:08:22  iter: 1099  total_loss: 0.4691  loss_cls: 0.08677  loss_box_reg: 0.1567  loss_mask: 0.1511  loss_rpn_cls: 0.01319  loss_rpn_loc: 0.05138    time: 1.2732  last_time: 1.2399  data_time: 0.3229  last_data_time: 0.3051   lr: 0.02  max_mem: 16949M
[03/01 19:22:47 d2.utils.events]:  eta: 0:07:57  iter: 1119  total_loss: 0.4977  loss_cls: 0.08652  loss_box_reg: 0.173  loss_mask: 0.1663  loss_rpn_cls: 0.01366  loss_rpn_loc: 0.05819    time: 1.2815  last_time: 1.3177  data_time: 0.3651  last_data_time: 0.3507   lr: 0.02  max_mem: 16949M
[03/01 19:23:13 d2.utils.events]:  eta: 0:07:32  iter: 1139  total_loss: 0.4928  loss_cls: 0.08809  loss_box_reg: 0.1692  loss_mask: 0.1538  loss_rpn_cls: 0.01082  loss_rpn_loc: 0.05901    time: 1.2816  last_time: 1.2060  data_time: 0.3185  last_data_time: 0.2843   lr: 0.02  max_mem: 16949M
[03/01 19:23:38 d2.utils.events]:  eta: 0:07:07  iter: 1159  total_loss: 0.4513  loss_cls: 0.08092  loss_box_reg: 0.1529  loss_mask: 0.1518  loss_rpn_cls: 0.01108  loss_rpn_loc: 0.05445    time: 1.2815  last_time: 1.2229  data_time: 0.3219  last_data_time: 0.2928   lr: 0.02  max_mem: 16949M
[03/01 19:24:04 d2.utils.events]:  eta: 0:06:43  iter: 1179  total_loss: 0.482  loss_cls: 0.08883  loss_box_reg: 0.1712  loss_mask: 0.1622  loss_rpn_cls: 0.01002  loss_rpn_loc: 0.0532    time: 1.2818  last_time: 1.2888  data_time: 0.3306  last_data_time: 0.3047   lr: 0.02  max_mem: 16949M
[03/01 19:24:30 d2.utils.events]:  eta: 0:06:18  iter: 1199  total_loss: 0.4781  loss_cls: 0.08846  loss_box_reg: 0.1645  loss_mask: 0.1581  loss_rpn_cls: 0.01241  loss_rpn_loc: 0.05318    time: 1.2818  last_time: 1.2917  data_time: 0.3222  last_data_time: 0.3265   lr: 0.02  max_mem: 16949M
[03/01 19:24:56 d2.utils.events]:  eta: 0:05:53  iter: 1219  total_loss: 0.4844  loss_cls: 0.08822  loss_box_reg: 0.1643  loss_mask: 0.1525  loss_rpn_cls: 0.01325  loss_rpn_loc: 0.05528    time: 1.2820  last_time: 1.3348  data_time: 0.3291  last_data_time: 0.3376   lr: 0.02  max_mem: 16949M
[03/01 19:25:22 d2.utils.events]:  eta: 0:05:28  iter: 1239  total_loss: 0.4574  loss_cls: 0.0783  loss_box_reg: 0.1638  loss_mask: 0.1503  loss_rpn_cls: 0.01237  loss_rpn_loc: 0.04736    time: 1.2821  last_time: 1.2636  data_time: 0.3260  last_data_time: 0.3172   lr: 0.02  max_mem: 16949M
[03/01 19:25:48 d2.utils.events]:  eta: 0:05:03  iter: 1259  total_loss: 0.4621  loss_cls: 0.08115  loss_box_reg: 0.1627  loss_mask: 0.1512  loss_rpn_cls: 0.0118  loss_rpn_loc: 0.05381    time: 1.2824  last_time: 1.2823  data_time: 0.3330  last_data_time: 0.3107   lr: 0.02  max_mem: 16949M
[03/01 19:26:13 d2.utils.events]:  eta: 0:04:38  iter: 1279  total_loss: 0.466  loss_cls: 0.07895  loss_box_reg: 0.1651  loss_mask: 0.1437  loss_rpn_cls: 0.01205  loss_rpn_loc: 0.0548    time: 1.2825  last_time: 1.3610  data_time: 0.3222  last_data_time: 0.3810   lr: 0.02  max_mem: 17048M
[03/01 19:26:39 d2.utils.events]:  eta: 0:04:13  iter: 1299  total_loss: 0.4706  loss_cls: 0.0845  loss_box_reg: 0.1671  loss_mask: 0.1428  loss_rpn_cls: 0.01065  loss_rpn_loc: 0.05536    time: 1.2828  last_time: 1.2866  data_time: 0.3257  last_data_time: 0.3278   lr: 0.02  max_mem: 17048M
[03/01 19:27:05 d2.utils.events]:  eta: 0:03:48  iter: 1319  total_loss: 0.4417  loss_cls: 0.07486  loss_box_reg: 0.1539  loss_mask: 0.1498  loss_rpn_cls: 0.00866  loss_rpn_loc: 0.04911    time: 1.2827  last_time: 1.3022  data_time: 0.3100  last_data_time: 0.3140   lr: 0.02  max_mem: 17048M
[03/01 19:27:31 d2.utils.events]:  eta: 0:03:23  iter: 1339  total_loss: 0.4355  loss_cls: 0.07465  loss_box_reg: 0.1563  loss_mask: 0.1443  loss_rpn_cls: 0.008521  loss_rpn_loc: 0.04793    time: 1.2827  last_time: 1.2941  data_time: 0.3149  last_data_time: 0.3368   lr: 0.02  max_mem: 17048M
[03/01 19:27:56 d2.utils.events]:  eta: 0:02:57  iter: 1359  total_loss: 0.4309  loss_cls: 0.07528  loss_box_reg: 0.1543  loss_mask: 0.1456  loss_rpn_cls: 0.008604  loss_rpn_loc: 0.04784    time: 1.2827  last_time: 1.3288  data_time: 0.3116  last_data_time: 0.3529   lr: 0.02  max_mem: 17048M
[03/01 19:28:22 d2.utils.events]:  eta: 0:02:32  iter: 1379  total_loss: 0.4587  loss_cls: 0.07726  loss_box_reg: 0.1589  loss_mask: 0.1547  loss_rpn_cls: 0.009502  loss_rpn_loc: 0.05229    time: 1.2829  last_time: 1.1997  data_time: 0.3294  last_data_time: 0.2660   lr: 0.02  max_mem: 17048M
[03/01 19:28:49 d2.utils.events]:  eta: 0:02:07  iter: 1399  total_loss: 0.4452  loss_cls: 0.07788  loss_box_reg: 0.1644  loss_mask: 0.1489  loss_rpn_cls: 0.01076  loss_rpn_loc: 0.04785    time: 1.2831  last_time: 1.2571  data_time: 0.3243  last_data_time: 0.3374   lr: 0.02  max_mem: 17048M
[03/01 19:29:14 d2.utils.events]:  eta: 0:01:41  iter: 1419  total_loss: 0.4125  loss_cls: 0.06866  loss_box_reg: 0.1464  loss_mask: 0.1469  loss_rpn_cls: 0.008351  loss_rpn_loc: 0.03962    time: 1.2829  last_time: 1.2418  data_time: 0.3113  last_data_time: 0.2780   lr: 0.02  max_mem: 17048M
[03/01 19:29:41 d2.utils.events]:  eta: 0:01:16  iter: 1439  total_loss: 0.4709  loss_cls: 0.08462  loss_box_reg: 0.1666  loss_mask: 0.1483  loss_rpn_cls: 0.01165  loss_rpn_loc: 0.0523    time: 1.2835  last_time: 1.3772  data_time: 0.3456  last_data_time: 0.4074   lr: 0.02  max_mem: 17048M
[03/01 19:30:06 d2.utils.events]:  eta: 0:00:51  iter: 1459  total_loss: 0.4436  loss_cls: 0.07947  loss_box_reg: 0.1595  loss_mask: 0.1443  loss_rpn_cls: 0.009286  loss_rpn_loc: 0.04677    time: 1.2836  last_time: 1.3331  data_time: 0.3173  last_data_time: 0.3508   lr: 0.02  max_mem: 17048M
[03/01 19:30:32 d2.utils.events]:  eta: 0:00:25  iter: 1479  total_loss: 0.4226  loss_cls: 0.07425  loss_box_reg: 0.149  loss_mask: 0.1537  loss_rpn_cls: 0.009475  loss_rpn_loc: 0.047    time: 1.2836  last_time: 1.2437  data_time: 0.3195  last_data_time: 0.2878   lr: 0.02  max_mem: 17048M
[03/01 19:31:01 d2.utils.events]:  eta: 0:00:00  iter: 1499  total_loss: 0.4283  loss_cls: 0.07756  loss_box_reg: 0.1606  loss_mask: 0.1439  loss_rpn_cls: 0.009331  loss_rpn_loc: 0.04761    time: 1.2841  last_time: 1.3144  data_time: 0.3332  last_data_time: 0.3391   lr: 0.02  max_mem: 17048M
[03/01 19:31:01 d2.engine.hooks]: Overall training speed: 1498 iterations in 0:32:03 (1.2841 s / it)
[03/01 19:31:01 d2.engine.hooks]: Total training time: 0:32:16 (0:00:13 on hooks)
[03/01 19:31:03 d2.data.build]: Distribution of instances among all 11 categories:
|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
| background | 0            |    car     | 8021         | pedestrian | 3347         |
|            | 0            |            | 0            |            | 0            |
|            | 0            |            | 0            |            | 0            |
|            | 0            |   ignore   | 2765         |            |              |
|   total    | 14133        |            |              |            |              |
[03/01 19:31:03 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[03/01 19:31:03 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/01 19:31:03 d2.data.common]: Serializing 2919 elements to byte tensors and concatenating them all ...
[03/01 19:31:03 d2.data.common]: Serialized dataset takes 5.86 MiB
WARNING [03/01 19:31:03 d2.engine.defaults]: No evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
[03/01 19:31:04 d2.checkpoint.detection_checkpoint]: [DetectionCheckpointer] Loading from /ghome/group07/C5-W2/lr_0_02_bs_64_is_16/model_0001499.pth ...
[03/01 19:31:08 d2.evaluation.coco_evaluation]: Trying to convert 'KITTI-MOTS_val' to COCO format ...
[03/01 19:31:08 d2.data.datasets.coco]: Converting annotations of dataset 'KITTI-MOTS_val' to COCO format ...)
[03/01 19:31:14 d2.data.datasets.coco]: Converting dataset dicts into COCO format
[03/01 19:31:15 d2.data.datasets.coco]: Conversion finished, #images: 2919, #annotations: 14133
[03/01 19:31:15 d2.data.datasets.coco]: Caching COCO format annotations at '/ghome/group07/C5-W2/lr_0_02_bs_64_is_16/KITTI-MOTS_val_coco_format.json' ...
[03/01 19:31:17 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[03/01 19:31:17 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/01 19:31:17 d2.data.common]: Serializing 2919 elements to byte tensors and concatenating them all ...
[03/01 19:31:17 d2.data.common]: Serialized dataset takes 5.86 MiB
[03/01 19:31:17 d2.evaluation.evaluator]: Start inference on 2919 batches
[03/01 19:31:22 d2.evaluation.evaluator]: Inference done 11/2919. Dataloading: 0.0025 s/iter. Inference: 0.0548 s/iter. Eval: 0.0033 s/iter. Total: 0.0606 s/iter. ETA=0:02:56
[03/01 19:31:27 d2.evaluation.evaluator]: Inference done 97/2919. Dataloading: 0.0028 s/iter. Inference: 0.0523 s/iter. Eval: 0.0038 s/iter. Total: 0.0589 s/iter. ETA=0:02:46
[03/01 19:31:32 d2.evaluation.evaluator]: Inference done 182/2919. Dataloading: 0.0027 s/iter. Inference: 0.0529 s/iter. Eval: 0.0033 s/iter. Total: 0.0589 s/iter. ETA=0:02:41
[03/01 19:31:37 d2.evaluation.evaluator]: Inference done 267/2919. Dataloading: 0.0027 s/iter. Inference: 0.0532 s/iter. Eval: 0.0030 s/iter. Total: 0.0590 s/iter. ETA=0:02:36
[03/01 19:31:42 d2.evaluation.evaluator]: Inference done 354/2919. Dataloading: 0.0027 s/iter. Inference: 0.0533 s/iter. Eval: 0.0028 s/iter. Total: 0.0588 s/iter. ETA=0:02:30
[03/01 19:31:47 d2.evaluation.evaluator]: Inference done 440/2919. Dataloading: 0.0027 s/iter. Inference: 0.0533 s/iter. Eval: 0.0027 s/iter. Total: 0.0587 s/iter. ETA=0:02:25
[03/01 19:31:52 d2.evaluation.evaluator]: Inference done 527/2919. Dataloading: 0.0026 s/iter. Inference: 0.0533 s/iter. Eval: 0.0025 s/iter. Total: 0.0586 s/iter. ETA=0:02:20
[03/01 19:31:57 d2.evaluation.evaluator]: Inference done 616/2919. Dataloading: 0.0026 s/iter. Inference: 0.0531 s/iter. Eval: 0.0025 s/iter. Total: 0.0583 s/iter. ETA=0:02:14
[03/01 19:32:02 d2.evaluation.evaluator]: Inference done 702/2919. Dataloading: 0.0026 s/iter. Inference: 0.0531 s/iter. Eval: 0.0026 s/iter. Total: 0.0583 s/iter. ETA=0:02:09
[03/01 19:32:07 d2.evaluation.evaluator]: Inference done 785/2919. Dataloading: 0.0026 s/iter. Inference: 0.0533 s/iter. Eval: 0.0026 s/iter. Total: 0.0586 s/iter. ETA=0:02:05
[03/01 19:32:12 d2.evaluation.evaluator]: Inference done 873/2919. Dataloading: 0.0027 s/iter. Inference: 0.0531 s/iter. Eval: 0.0026 s/iter. Total: 0.0585 s/iter. ETA=0:01:59
[03/01 19:32:17 d2.evaluation.evaluator]: Inference done 963/2919. Dataloading: 0.0027 s/iter. Inference: 0.0529 s/iter. Eval: 0.0026 s/iter. Total: 0.0582 s/iter. ETA=0:01:53
[03/01 19:32:22 d2.evaluation.evaluator]: Inference done 1050/2919. Dataloading: 0.0027 s/iter. Inference: 0.0528 s/iter. Eval: 0.0026 s/iter. Total: 0.0582 s/iter. ETA=0:01:48
[03/01 19:32:27 d2.evaluation.evaluator]: Inference done 1136/2919. Dataloading: 0.0027 s/iter. Inference: 0.0528 s/iter. Eval: 0.0027 s/iter. Total: 0.0582 s/iter. ETA=0:01:43
[03/01 19:32:32 d2.evaluation.evaluator]: Inference done 1223/2919. Dataloading: 0.0027 s/iter. Inference: 0.0527 s/iter. Eval: 0.0028 s/iter. Total: 0.0582 s/iter. ETA=0:01:38
[03/01 19:32:37 d2.evaluation.evaluator]: Inference done 1313/2919. Dataloading: 0.0027 s/iter. Inference: 0.0525 s/iter. Eval: 0.0028 s/iter. Total: 0.0580 s/iter. ETA=0:01:33
[03/01 19:32:42 d2.evaluation.evaluator]: Inference done 1403/2919. Dataloading: 0.0027 s/iter. Inference: 0.0523 s/iter. Eval: 0.0028 s/iter. Total: 0.0579 s/iter. ETA=0:01:27
[03/01 19:32:47 d2.evaluation.evaluator]: Inference done 1495/2919. Dataloading: 0.0027 s/iter. Inference: 0.0521 s/iter. Eval: 0.0028 s/iter. Total: 0.0577 s/iter. ETA=0:01:22
[03/01 19:32:53 d2.evaluation.evaluator]: Inference done 1580/2919. Dataloading: 0.0027 s/iter. Inference: 0.0522 s/iter. Eval: 0.0028 s/iter. Total: 0.0577 s/iter. ETA=0:01:17
[03/01 19:32:58 d2.evaluation.evaluator]: Inference done 1600/2919. Dataloading: 0.0028 s/iter. Inference: 0.0545 s/iter. Eval: 0.0028 s/iter. Total: 0.0602 s/iter. ETA=0:01:19
[03/01 19:33:03 d2.evaluation.evaluator]: Inference done 1679/2919. Dataloading: 0.0028 s/iter. Inference: 0.0546 s/iter. Eval: 0.0028 s/iter. Total: 0.0603 s/iter. ETA=0:01:14
[03/01 19:33:08 d2.evaluation.evaluator]: Inference done 1753/2919. Dataloading: 0.0029 s/iter. Inference: 0.0547 s/iter. Eval: 0.0030 s/iter. Total: 0.0607 s/iter. ETA=0:01:10
[03/01 19:33:13 d2.evaluation.evaluator]: Inference done 1839/2919. Dataloading: 0.0029 s/iter. Inference: 0.0545 s/iter. Eval: 0.0031 s/iter. Total: 0.0606 s/iter. ETA=0:01:05
[03/01 19:33:18 d2.evaluation.evaluator]: Inference done 1920/2919. Dataloading: 0.0029 s/iter. Inference: 0.0543 s/iter. Eval: 0.0034 s/iter. Total: 0.0607 s/iter. ETA=0:01:00
[03/01 19:33:23 d2.evaluation.evaluator]: Inference done 2010/2919. Dataloading: 0.0029 s/iter. Inference: 0.0541 s/iter. Eval: 0.0034 s/iter. Total: 0.0605 s/iter. ETA=0:00:54
[03/01 19:33:28 d2.evaluation.evaluator]: Inference done 2098/2919. Dataloading: 0.0029 s/iter. Inference: 0.0540 s/iter. Eval: 0.0034 s/iter. Total: 0.0603 s/iter. ETA=0:00:49
[03/01 19:33:33 d2.evaluation.evaluator]: Inference done 2182/2919. Dataloading: 0.0029 s/iter. Inference: 0.0538 s/iter. Eval: 0.0035 s/iter. Total: 0.0603 s/iter. ETA=0:00:44
[03/01 19:33:38 d2.evaluation.evaluator]: Inference done 2266/2919. Dataloading: 0.0029 s/iter. Inference: 0.0538 s/iter. Eval: 0.0035 s/iter. Total: 0.0603 s/iter. ETA=0:00:39
[03/01 19:33:43 d2.evaluation.evaluator]: Inference done 2351/2919. Dataloading: 0.0029 s/iter. Inference: 0.0538 s/iter. Eval: 0.0035 s/iter. Total: 0.0603 s/iter. ETA=0:00:34
[03/01 19:33:48 d2.evaluation.evaluator]: Inference done 2432/2919. Dataloading: 0.0029 s/iter. Inference: 0.0537 s/iter. Eval: 0.0037 s/iter. Total: 0.0603 s/iter. ETA=0:00:29
[03/01 19:33:53 d2.evaluation.evaluator]: Inference done 2515/2919. Dataloading: 0.0029 s/iter. Inference: 0.0535 s/iter. Eval: 0.0038 s/iter. Total: 0.0603 s/iter. ETA=0:00:24
[03/01 19:33:58 d2.evaluation.evaluator]: Inference done 2599/2919. Dataloading: 0.0029 s/iter. Inference: 0.0534 s/iter. Eval: 0.0039 s/iter. Total: 0.0603 s/iter. ETA=0:00:19
[03/01 19:34:03 d2.evaluation.evaluator]: Inference done 2685/2919. Dataloading: 0.0029 s/iter. Inference: 0.0534 s/iter. Eval: 0.0039 s/iter. Total: 0.0603 s/iter. ETA=0:00:14
[03/01 19:34:08 d2.evaluation.evaluator]: Inference done 2771/2919. Dataloading: 0.0029 s/iter. Inference: 0.0534 s/iter. Eval: 0.0039 s/iter. Total: 0.0602 s/iter. ETA=0:00:08
[03/01 19:34:13 d2.evaluation.evaluator]: Inference done 2858/2919. Dataloading: 0.0029 s/iter. Inference: 0.0533 s/iter. Eval: 0.0038 s/iter. Total: 0.0601 s/iter. ETA=0:00:03
[03/01 19:34:17 d2.evaluation.evaluator]: Total inference time: 0:02:55.827255 (0.060339 s / iter per device, on 1 devices)
[03/01 19:34:17 d2.evaluation.evaluator]: Total inference pure compute time: 0:02:35 (0.053425 s / iter per device, on 1 devices)
[03/01 19:34:18 d2.evaluation.coco_evaluation]: Preparing results for COCO format ...
[03/01 19:34:18 d2.evaluation.coco_evaluation]: Saving results to /ghome/group07/C5-W2/lr_0_02_bs_64_is_16/coco_instances_results.json
[03/01 19:34:18 d2.evaluation.coco_evaluation]: Evaluating predictions with unofficial COCO API...
Loading and preparing results...
DONE (t=0.02s)
creating index...
index created!
[03/01 19:34:18 d2.evaluation.fast_eval_api]: Evaluate annotation type *bbox*
[03/01 19:34:19 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 1.19 seconds.
[03/01 19:34:19 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[03/01 19:34:19 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.09 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.412
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.597
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.464
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.268
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.479
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.545
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.165
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.472
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.475
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.317
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.526
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.653
[03/01 19:34:19 d2.evaluation.coco_evaluation]: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 41.188 | 59.740 | 46.357 | 26.812 | 47.949 | 54.476 |
[03/01 19:34:19 d2.evaluation.coco_evaluation]: Per-category bbox AP: 
| category   | AP   | category   | AP     | category   | AP     |
|:-----------|:-----|:-----------|:-------|:-----------|:-------|
| background | nan  | car        | 68.908 | pedestrian | 49.049 |
|            | nan  |            | nan    |            | nan    |
|            | nan  |            | nan    |            | nan    |
|            | nan  | ignore     | 5.607  |            |        |
Loading and preparing results...
DONE (t=0.19s)
creating index...
index created!
[03/01 19:34:19 d2.evaluation.fast_eval_api]: Evaluate annotation type *segm*
[03/01 19:34:21 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 1.06 seconds.
[03/01 19:34:21 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[03/01 19:34:21 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.08 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.379
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.559
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.425
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.226
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.442
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.552
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.149
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.432
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.433
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.283
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.482
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.602
[03/01 19:34:21 d2.evaluation.coco_evaluation]: Evaluation results for segm: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 37.903 | 55.908 | 42.539 | 22.563 | 44.184 | 55.174 |
[03/01 19:34:21 d2.evaluation.coco_evaluation]: Per-category segm AP: 
| category   | AP   | category   | AP     | category   | AP     |
|:-----------|:-----|:-----------|:-------|:-----------|:-------|
| background | nan  | car        | 69.299 | pedestrian | 39.947 |
|            | nan  |            | nan    |            | nan    |
|            | nan  |            | nan    |            | nan    |
|            | nan  | ignore     | 4.463  |            |        |
OrderedDict([('bbox', {'AP': 41.18774767355629, 'AP50': 59.739734469868424, 'AP75': 46.35717215163614, 'APs': 26.811991685457937, 'APm': 47.94852855853999, 'APl': 54.47617773848705, 'AP-background': nan, 'AP-car': 68.90756148529879, 'AP-pedestrian': 49.04905383255237, 'AP-': nan, 'AP-ignore': 5.6066277028177}), ('segm', {'AP': 37.90294697860734, 'AP50': 55.90764274975889, 'AP75': 42.53901399030187, 'APs': 22.562685482140772, 'APm': 44.18435951094344, 'APl': 55.174322197495854, 'AP-background': nan, 'AP-car': 69.29891588805819, 'AP-pedestrian': 39.947062068782735, 'AP-': nan, 'AP-ignore': 4.462862978981091})])
