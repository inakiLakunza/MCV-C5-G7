1
The device we will be working on is: cuda
[03/01 19:53:43 d2.engine.defaults]: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=12, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=44, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 11, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[03/01 19:53:46 d2.data.build]: Removed 0 images with no usable annotations. 5007 images left.
[03/01 19:53:47 d2.data.build]: Distribution of instances among all 11 categories:
|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
| background | 0            |    car     | 18822        | pedestrian | 8065         |
|            | 0            |            | 0            |            | 0            |
|            | 0            |            | 0            |            | 0            |
|            | 0            |   ignore   | 4977         |            |              |
|   total    | 31864        |            |              |            |              |
[03/01 19:53:47 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[03/01 19:53:47 d2.data.build]: Using training sampler TrainingSampler
[03/01 19:53:47 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/01 19:53:47 d2.data.common]: Serializing 5007 elements to byte tensors and concatenating them all ...
[03/01 19:53:47 d2.data.common]: Serialized dataset takes 13.56 MiB
[03/01 19:53:47 d2.data.build]: Making batched data loader with batch_size=8
WARNING [03/01 19:53:47 d2.solver.build]: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[03/01 19:53:47 d2.checkpoint.detection_checkpoint]: [DetectionCheckpointer] Loading from https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl ...
[03/01 19:53:47 d2.engine.train_loop]: Starting training from iteration 0
[03/01 19:54:03 d2.utils.events]:  eta: 0:13:51  iter: 19  total_loss: 2.92  loss_cls: 1.713  loss_box_reg: 0.4401  loss_mask: 0.6639  loss_rpn_cls: 0.1308  loss_rpn_loc: 0.06634    time: 0.5636  last_time: 0.6355  data_time: 0.1431  last_data_time: 0.0737   lr: 0.00039962  max_mem: 8350M
[03/01 19:54:22 d2.utils.events]:  eta: 0:13:41  iter: 39  total_loss: 1.543  loss_cls: 0.538  loss_box_reg: 0.4364  loss_mask: 0.4518  loss_rpn_cls: 0.04953  loss_rpn_loc: 0.07448    time: 0.5817  last_time: 0.5331  data_time: 0.0719  last_data_time: 0.0414   lr: 0.00079922  max_mem: 8350M
[03/01 19:54:34 d2.utils.events]:  eta: 0:13:32  iter: 59  total_loss: 1.172  loss_cls: 0.3082  loss_box_reg: 0.409  loss_mask: 0.3141  loss_rpn_cls: 0.05797  loss_rpn_loc: 0.08009    time: 0.5803  last_time: 0.6354  data_time: 0.0707  last_data_time: 0.1116   lr: 0.0011988  max_mem: 8350M
[03/01 19:54:46 d2.utils.events]:  eta: 0:13:31  iter: 79  total_loss: 0.8581  loss_cls: 0.2234  loss_box_reg: 0.2827  loss_mask: 0.2738  loss_rpn_cls: 0.04229  loss_rpn_loc: 0.05578    time: 0.5877  last_time: 0.6205  data_time: 0.0726  last_data_time: 0.0675   lr: 0.0015984  max_mem: 8591M
[03/01 19:54:57 d2.utils.events]:  eta: 0:13:14  iter: 99  total_loss: 0.7725  loss_cls: 0.1703  loss_box_reg: 0.2475  loss_mask: 0.2608  loss_rpn_cls: 0.03737  loss_rpn_loc: 0.0747    time: 0.5817  last_time: 0.5526  data_time: 0.0684  last_data_time: 0.0897   lr: 0.001998  max_mem: 8591M
[03/01 19:55:09 d2.utils.events]:  eta: 0:13:07  iter: 119  total_loss: 0.7622  loss_cls: 0.155  loss_box_reg: 0.2478  loss_mask: 0.2561  loss_rpn_cls: 0.03615  loss_rpn_loc: 0.07016    time: 0.5809  last_time: 0.5810  data_time: 0.0741  last_data_time: 0.0582   lr: 0.0023976  max_mem: 8591M
[03/01 19:55:20 d2.utils.events]:  eta: 0:12:55  iter: 139  total_loss: 0.7309  loss_cls: 0.155  loss_box_reg: 0.2228  loss_mask: 0.2362  loss_rpn_cls: 0.02894  loss_rpn_loc: 0.06141    time: 0.5782  last_time: 0.5610  data_time: 0.0692  last_data_time: 0.0735   lr: 0.0027972  max_mem: 8591M
[03/01 19:55:31 d2.utils.events]:  eta: 0:12:42  iter: 159  total_loss: 0.6826  loss_cls: 0.1415  loss_box_reg: 0.2161  loss_mask: 0.225  loss_rpn_cls: 0.0271  loss_rpn_loc: 0.07361    time: 0.5758  last_time: 0.5827  data_time: 0.0716  last_data_time: 0.1033   lr: 0.0031968  max_mem: 8625M
[03/01 19:55:42 d2.utils.events]:  eta: 0:12:27  iter: 179  total_loss: 0.6682  loss_cls: 0.1347  loss_box_reg: 0.2018  loss_mask: 0.2403  loss_rpn_cls: 0.02339  loss_rpn_loc: 0.06273    time: 0.5735  last_time: 0.5874  data_time: 0.0692  last_data_time: 0.0678   lr: 0.0035964  max_mem: 8625M
[03/01 19:55:54 d2.utils.events]:  eta: 0:12:16  iter: 199  total_loss: 0.6694  loss_cls: 0.1294  loss_box_reg: 0.1979  loss_mask: 0.2355  loss_rpn_cls: 0.02405  loss_rpn_loc: 0.05817    time: 0.5727  last_time: 0.5516  data_time: 0.0742  last_data_time: 0.0581   lr: 0.003996  max_mem: 8625M
[03/01 19:56:05 d2.utils.events]:  eta: 0:12:04  iter: 219  total_loss: 0.6548  loss_cls: 0.1271  loss_box_reg: 0.198  loss_mask: 0.2216  loss_rpn_cls: 0.02413  loss_rpn_loc: 0.06968    time: 0.5706  last_time: 0.6228  data_time: 0.0675  last_data_time: 0.0632   lr: 0.0043956  max_mem: 8625M
[03/01 19:56:16 d2.utils.events]:  eta: 0:11:52  iter: 239  total_loss: 0.7049  loss_cls: 0.1365  loss_box_reg: 0.2142  loss_mask: 0.2272  loss_rpn_cls: 0.02834  loss_rpn_loc: 0.06908    time: 0.5696  last_time: 0.6009  data_time: 0.0680  last_data_time: 0.0762   lr: 0.0047952  max_mem: 8625M
[03/01 19:56:27 d2.utils.events]:  eta: 0:11:41  iter: 259  total_loss: 0.6636  loss_cls: 0.1375  loss_box_reg: 0.2171  loss_mask: 0.2177  loss_rpn_cls: 0.02489  loss_rpn_loc: 0.07112    time: 0.5702  last_time: 0.5873  data_time: 0.0742  last_data_time: 0.0653   lr: 0.0051948  max_mem: 8625M
[03/01 19:56:39 d2.utils.events]:  eta: 0:11:31  iter: 279  total_loss: 0.672  loss_cls: 0.145  loss_box_reg: 0.2194  loss_mask: 0.2136  loss_rpn_cls: 0.02574  loss_rpn_loc: 0.0637    time: 0.5706  last_time: 0.5434  data_time: 0.0748  last_data_time: 0.0359   lr: 0.0055944  max_mem: 8666M
[03/01 19:56:50 d2.utils.events]:  eta: 0:11:19  iter: 299  total_loss: 0.6327  loss_cls: 0.1356  loss_box_reg: 0.2015  loss_mask: 0.2013  loss_rpn_cls: 0.02378  loss_rpn_loc: 0.05614    time: 0.5703  last_time: 0.5112  data_time: 0.0676  last_data_time: 0.0346   lr: 0.005994  max_mem: 8666M
[03/01 19:57:02 d2.utils.events]:  eta: 0:11:09  iter: 319  total_loss: 0.631  loss_cls: 0.1309  loss_box_reg: 0.1985  loss_mask: 0.2027  loss_rpn_cls: 0.02356  loss_rpn_loc: 0.06563    time: 0.5709  last_time: 0.5843  data_time: 0.0655  last_data_time: 0.0610   lr: 0.0063936  max_mem: 8666M
[03/01 19:57:13 d2.utils.events]:  eta: 0:10:57  iter: 339  total_loss: 0.6375  loss_cls: 0.129  loss_box_reg: 0.1935  loss_mask: 0.2109  loss_rpn_cls: 0.03278  loss_rpn_loc: 0.06559    time: 0.5702  last_time: 0.5420  data_time: 0.0653  last_data_time: 0.0611   lr: 0.0067932  max_mem: 8666M
[03/01 19:57:24 d2.utils.events]:  eta: 0:10:45  iter: 359  total_loss: 0.6266  loss_cls: 0.1306  loss_box_reg: 0.2074  loss_mask: 0.2065  loss_rpn_cls: 0.02041  loss_rpn_loc: 0.0664    time: 0.5698  last_time: 0.5545  data_time: 0.0676  last_data_time: 0.0813   lr: 0.0071928  max_mem: 8666M
[03/01 19:57:36 d2.utils.events]:  eta: 0:10:35  iter: 379  total_loss: 0.6684  loss_cls: 0.1368  loss_box_reg: 0.2183  loss_mask: 0.1921  loss_rpn_cls: 0.02499  loss_rpn_loc: 0.0617    time: 0.5709  last_time: 0.5798  data_time: 0.0693  last_data_time: 0.0665   lr: 0.0075924  max_mem: 8694M
[03/01 19:57:48 d2.utils.events]:  eta: 0:10:25  iter: 399  total_loss: 0.6406  loss_cls: 0.1366  loss_box_reg: 0.2075  loss_mask: 0.1835  loss_rpn_cls: 0.02301  loss_rpn_loc: 0.08245    time: 0.5718  last_time: 0.5674  data_time: 0.0756  last_data_time: 0.0824   lr: 0.007992  max_mem: 8694M
[03/01 19:57:59 d2.utils.events]:  eta: 0:10:14  iter: 419  total_loss: 0.6126  loss_cls: 0.12  loss_box_reg: 0.186  loss_mask: 0.2064  loss_rpn_cls: 0.02558  loss_rpn_loc: 0.06391    time: 0.5721  last_time: 0.6116  data_time: 0.0703  last_data_time: 0.0867   lr: 0.0083916  max_mem: 8694M
[03/01 19:58:11 d2.utils.events]:  eta: 0:10:02  iter: 439  total_loss: 0.6194  loss_cls: 0.1216  loss_box_reg: 0.1874  loss_mask: 0.1911  loss_rpn_cls: 0.02252  loss_rpn_loc: 0.06446    time: 0.5721  last_time: 0.5862  data_time: 0.0746  last_data_time: 0.0738   lr: 0.0087912  max_mem: 8694M
[03/01 19:58:22 d2.utils.events]:  eta: 0:09:52  iter: 459  total_loss: 0.6395  loss_cls: 0.1247  loss_box_reg: 0.1959  loss_mask: 0.198  loss_rpn_cls: 0.02097  loss_rpn_loc: 0.0739    time: 0.5723  last_time: 0.5446  data_time: 0.0710  last_data_time: 0.0598   lr: 0.0091908  max_mem: 8940M
[03/01 19:58:34 d2.utils.events]:  eta: 0:09:40  iter: 479  total_loss: 0.5839  loss_cls: 0.1276  loss_box_reg: 0.1867  loss_mask: 0.1889  loss_rpn_cls: 0.02197  loss_rpn_loc: 0.07017    time: 0.5721  last_time: 0.5164  data_time: 0.0603  last_data_time: 0.0424   lr: 0.0095904  max_mem: 8940M
[03/01 19:58:46 d2.utils.events]:  eta: 0:09:29  iter: 499  total_loss: 0.659  loss_cls: 0.1379  loss_box_reg: 0.2081  loss_mask: 0.1993  loss_rpn_cls: 0.02202  loss_rpn_loc: 0.07233    time: 0.5722  last_time: 0.5554  data_time: 0.0715  last_data_time: 0.0642   lr: 0.00999  max_mem: 8940M
[03/01 19:58:58 d2.utils.events]:  eta: 0:09:18  iter: 519  total_loss: 0.631  loss_cls: 0.1308  loss_box_reg: 0.2148  loss_mask: 0.1868  loss_rpn_cls: 0.024  loss_rpn_loc: 0.07295    time: 0.5726  last_time: 0.5765  data_time: 0.0715  last_data_time: 0.0669   lr: 0.01039  max_mem: 8940M
[03/01 19:59:09 d2.utils.events]:  eta: 0:09:07  iter: 539  total_loss: 0.5997  loss_cls: 0.1128  loss_box_reg: 0.1931  loss_mask: 0.1935  loss_rpn_cls: 0.02644  loss_rpn_loc: 0.06731    time: 0.5723  last_time: 0.5739  data_time: 0.0735  last_data_time: 0.0912   lr: 0.010789  max_mem: 8940M
[03/01 19:59:21 d2.utils.events]:  eta: 0:08:55  iter: 559  total_loss: 0.5727  loss_cls: 0.1165  loss_box_reg: 0.1844  loss_mask: 0.1844  loss_rpn_cls: 0.02058  loss_rpn_loc: 0.05272    time: 0.5720  last_time: 0.5685  data_time: 0.0715  last_data_time: 0.0915   lr: 0.011189  max_mem: 8940M
[03/01 19:59:32 d2.utils.events]:  eta: 0:08:44  iter: 579  total_loss: 0.5813  loss_cls: 0.1217  loss_box_reg: 0.2016  loss_mask: 0.1686  loss_rpn_cls: 0.01867  loss_rpn_loc: 0.0689    time: 0.5721  last_time: 0.5575  data_time: 0.0669  last_data_time: 0.0591   lr: 0.011588  max_mem: 8940M
[03/01 19:59:44 d2.utils.events]:  eta: 0:08:32  iter: 599  total_loss: 0.638  loss_cls: 0.1249  loss_box_reg: 0.2137  loss_mask: 0.1841  loss_rpn_cls: 0.0263  loss_rpn_loc: 0.08087    time: 0.5722  last_time: 0.5445  data_time: 0.0674  last_data_time: 0.0454   lr: 0.011988  max_mem: 8940M
[03/01 19:59:55 d2.utils.events]:  eta: 0:08:21  iter: 619  total_loss: 0.6209  loss_cls: 0.119  loss_box_reg: 0.1962  loss_mask: 0.1749  loss_rpn_cls: 0.02019  loss_rpn_loc: 0.07978    time: 0.5720  last_time: 0.5724  data_time: 0.0610  last_data_time: 0.0581   lr: 0.012388  max_mem: 8940M
[03/01 20:00:07 d2.utils.events]:  eta: 0:08:10  iter: 639  total_loss: 0.6272  loss_cls: 0.1185  loss_box_reg: 0.2242  loss_mask: 0.188  loss_rpn_cls: 0.01906  loss_rpn_loc: 0.0706    time: 0.5724  last_time: 0.6008  data_time: 0.0699  last_data_time: 0.0945   lr: 0.012787  max_mem: 8940M
[03/01 20:00:19 d2.utils.events]:  eta: 0:07:59  iter: 659  total_loss: 0.579  loss_cls: 0.1214  loss_box_reg: 0.1858  loss_mask: 0.1778  loss_rpn_cls: 0.01761  loss_rpn_loc: 0.05855    time: 0.5729  last_time: 0.5863  data_time: 0.0757  last_data_time: 0.0783   lr: 0.013187  max_mem: 8940M
[03/01 20:00:30 d2.utils.events]:  eta: 0:07:48  iter: 679  total_loss: 0.5812  loss_cls: 0.1129  loss_box_reg: 0.1991  loss_mask: 0.1829  loss_rpn_cls: 0.0169  loss_rpn_loc: 0.06841    time: 0.5732  last_time: 0.5669  data_time: 0.0686  last_data_time: 0.0791   lr: 0.013586  max_mem: 8940M
[03/01 20:00:42 d2.utils.events]:  eta: 0:07:36  iter: 699  total_loss: 0.5992  loss_cls: 0.1102  loss_box_reg: 0.195  loss_mask: 0.1927  loss_rpn_cls: 0.02009  loss_rpn_loc: 0.06346    time: 0.5732  last_time: 0.5730  data_time: 0.0634  last_data_time: 0.0740   lr: 0.013986  max_mem: 8940M
[03/01 20:00:54 d2.utils.events]:  eta: 0:07:25  iter: 719  total_loss: 0.5795  loss_cls: 0.1118  loss_box_reg: 0.1836  loss_mask: 0.1845  loss_rpn_cls: 0.0212  loss_rpn_loc: 0.06544    time: 0.5738  last_time: 0.6530  data_time: 0.0744  last_data_time: 0.0454   lr: 0.014386  max_mem: 8940M
[03/01 20:01:05 d2.utils.events]:  eta: 0:07:14  iter: 739  total_loss: 0.5425  loss_cls: 0.1077  loss_box_reg: 0.1657  loss_mask: 0.1801  loss_rpn_cls: 0.02325  loss_rpn_loc: 0.06262    time: 0.5737  last_time: 0.5604  data_time: 0.0634  last_data_time: 0.0815   lr: 0.014785  max_mem: 8940M
[03/01 20:01:17 d2.utils.events]:  eta: 0:07:02  iter: 759  total_loss: 0.5558  loss_cls: 0.1049  loss_box_reg: 0.1876  loss_mask: 0.1687  loss_rpn_cls: 0.01826  loss_rpn_loc: 0.05722    time: 0.5739  last_time: 0.5761  data_time: 0.0664  last_data_time: 0.0792   lr: 0.015185  max_mem: 8940M
[03/01 20:01:28 d2.utils.events]:  eta: 0:06:51  iter: 779  total_loss: 0.5666  loss_cls: 0.1125  loss_box_reg: 0.193  loss_mask: 0.1768  loss_rpn_cls: 0.01421  loss_rpn_loc: 0.06135    time: 0.5742  last_time: 0.5957  data_time: 0.0719  last_data_time: 0.0767   lr: 0.015584  max_mem: 8940M
[03/01 20:01:40 d2.utils.events]:  eta: 0:06:40  iter: 799  total_loss: 0.5836  loss_cls: 0.1178  loss_box_reg: 0.1899  loss_mask: 0.17  loss_rpn_cls: 0.01886  loss_rpn_loc: 0.07006    time: 0.5746  last_time: 0.5942  data_time: 0.0731  last_data_time: 0.0380   lr: 0.015984  max_mem: 8940M
[03/01 20:01:52 d2.utils.events]:  eta: 0:06:29  iter: 819  total_loss: 0.5351  loss_cls: 0.1065  loss_box_reg: 0.1896  loss_mask: 0.1628  loss_rpn_cls: 0.01297  loss_rpn_loc: 0.05679    time: 0.5746  last_time: 0.5944  data_time: 0.0684  last_data_time: 0.0613   lr: 0.016384  max_mem: 8940M
[03/01 20:02:03 d2.utils.events]:  eta: 0:06:17  iter: 839  total_loss: 0.583  loss_cls: 0.115  loss_box_reg: 0.2003  loss_mask: 0.1741  loss_rpn_cls: 0.01833  loss_rpn_loc: 0.07341    time: 0.5748  last_time: 0.5583  data_time: 0.0703  last_data_time: 0.0684   lr: 0.016783  max_mem: 8940M
[03/01 20:02:15 d2.utils.events]:  eta: 0:06:06  iter: 859  total_loss: 0.5973  loss_cls: 0.1197  loss_box_reg: 0.1993  loss_mask: 0.173  loss_rpn_cls: 0.02011  loss_rpn_loc: 0.06526    time: 0.5755  last_time: 0.6194  data_time: 0.0757  last_data_time: 0.0381   lr: 0.017183  max_mem: 8940M
[03/01 20:02:27 d2.utils.events]:  eta: 0:05:55  iter: 879  total_loss: 0.6025  loss_cls: 0.1148  loss_box_reg: 0.2094  loss_mask: 0.1737  loss_rpn_cls: 0.02134  loss_rpn_loc: 0.07167    time: 0.5758  last_time: 0.5701  data_time: 0.0666  last_data_time: 0.0784   lr: 0.017582  max_mem: 8940M
[03/01 20:02:39 d2.utils.events]:  eta: 0:05:43  iter: 899  total_loss: 0.5852  loss_cls: 0.1191  loss_box_reg: 0.2036  loss_mask: 0.1719  loss_rpn_cls: 0.01877  loss_rpn_loc: 0.05998    time: 0.5755  last_time: 0.5840  data_time: 0.0569  last_data_time: 0.0745   lr: 0.017982  max_mem: 8940M
[03/01 20:02:50 d2.utils.events]:  eta: 0:05:32  iter: 919  total_loss: 0.5536  loss_cls: 0.09641  loss_box_reg: 0.1844  loss_mask: 0.1846  loss_rpn_cls: 0.01994  loss_rpn_loc: 0.06398    time: 0.5756  last_time: 0.6044  data_time: 0.0747  last_data_time: 0.0915   lr: 0.018382  max_mem: 8940M
[03/01 20:03:02 d2.utils.events]:  eta: 0:05:21  iter: 939  total_loss: 0.5475  loss_cls: 0.1022  loss_box_reg: 0.1769  loss_mask: 0.1803  loss_rpn_cls: 0.0192  loss_rpn_loc: 0.08208    time: 0.5755  last_time: 0.5721  data_time: 0.0748  last_data_time: 0.0792   lr: 0.018781  max_mem: 8940M
[03/01 20:03:13 d2.utils.events]:  eta: 0:05:09  iter: 959  total_loss: 0.5511  loss_cls: 0.1041  loss_box_reg: 0.173  loss_mask: 0.1842  loss_rpn_cls: 0.0195  loss_rpn_loc: 0.06587    time: 0.5755  last_time: 0.6101  data_time: 0.0619  last_data_time: 0.0494   lr: 0.019181  max_mem: 8940M
[03/01 20:03:25 d2.utils.events]:  eta: 0:04:58  iter: 979  total_loss: 0.5919  loss_cls: 0.1099  loss_box_reg: 0.1895  loss_mask: 0.1873  loss_rpn_cls: 0.01785  loss_rpn_loc: 0.0679    time: 0.5758  last_time: 0.5910  data_time: 0.0716  last_data_time: 0.0766   lr: 0.01958  max_mem: 8940M
[03/01 20:03:38 d2.utils.events]:  eta: 0:04:46  iter: 999  total_loss: 0.5681  loss_cls: 0.1081  loss_box_reg: 0.1867  loss_mask: 0.1733  loss_rpn_cls: 0.02  loss_rpn_loc: 0.06902    time: 0.5760  last_time: 0.5782  data_time: 0.0723  last_data_time: 0.0635   lr: 0.01998  max_mem: 8940M
[03/01 20:03:49 d2.utils.events]:  eta: 0:04:35  iter: 1019  total_loss: 0.5347  loss_cls: 0.1083  loss_box_reg: 0.182  loss_mask: 0.1709  loss_rpn_cls: 0.01872  loss_rpn_loc: 0.06302    time: 0.5762  last_time: 0.5476  data_time: 0.0655  last_data_time: 0.0718   lr: 0.02  max_mem: 8940M
[03/01 20:04:01 d2.utils.events]:  eta: 0:04:24  iter: 1039  total_loss: 0.5402  loss_cls: 0.112  loss_box_reg: 0.1853  loss_mask: 0.173  loss_rpn_cls: 0.01616  loss_rpn_loc: 0.05308    time: 0.5762  last_time: 0.5533  data_time: 0.0656  last_data_time: 0.0498   lr: 0.02  max_mem: 8940M
[03/01 20:04:13 d2.utils.events]:  eta: 0:04:12  iter: 1059  total_loss: 0.5566  loss_cls: 0.124  loss_box_reg: 0.1918  loss_mask: 0.1815  loss_rpn_cls: 0.01607  loss_rpn_loc: 0.06969    time: 0.5765  last_time: 0.5320  data_time: 0.0662  last_data_time: 0.0387   lr: 0.02  max_mem: 8940M
[03/01 20:04:24 d2.utils.events]:  eta: 0:04:01  iter: 1079  total_loss: 0.5365  loss_cls: 0.09982  loss_box_reg: 0.1787  loss_mask: 0.1659  loss_rpn_cls: 0.01549  loss_rpn_loc: 0.06095    time: 0.5765  last_time: 0.5668  data_time: 0.0667  last_data_time: 0.0850   lr: 0.02  max_mem: 8940M
[03/01 20:04:36 d2.utils.events]:  eta: 0:03:50  iter: 1099  total_loss: 0.5743  loss_cls: 0.1119  loss_box_reg: 0.1968  loss_mask: 0.1652  loss_rpn_cls: 0.02282  loss_rpn_loc: 0.06925    time: 0.5768  last_time: 0.5903  data_time: 0.0653  last_data_time: 0.0495   lr: 0.02  max_mem: 8940M
[03/01 20:04:48 d2.utils.events]:  eta: 0:03:38  iter: 1119  total_loss: 0.4954  loss_cls: 0.09071  loss_box_reg: 0.1615  loss_mask: 0.1587  loss_rpn_cls: 0.01709  loss_rpn_loc: 0.0547    time: 0.5769  last_time: 0.5647  data_time: 0.0694  last_data_time: 0.0810   lr: 0.02  max_mem: 8940M
[03/01 20:05:00 d2.utils.events]:  eta: 0:03:27  iter: 1139  total_loss: 0.5146  loss_cls: 0.1084  loss_box_reg: 0.171  loss_mask: 0.1639  loss_rpn_cls: 0.01562  loss_rpn_loc: 0.06771    time: 0.5773  last_time: 0.5989  data_time: 0.0725  last_data_time: 0.0693   lr: 0.02  max_mem: 8940M
[03/01 20:05:11 d2.utils.events]:  eta: 0:03:15  iter: 1159  total_loss: 0.5457  loss_cls: 0.106  loss_box_reg: 0.1797  loss_mask: 0.1683  loss_rpn_cls: 0.01629  loss_rpn_loc: 0.06047    time: 0.5772  last_time: 0.6075  data_time: 0.0664  last_data_time: 0.0618   lr: 0.02  max_mem: 8940M
[03/01 20:05:23 d2.utils.events]:  eta: 0:03:04  iter: 1179  total_loss: 0.5645  loss_cls: 0.1202  loss_box_reg: 0.1933  loss_mask: 0.1646  loss_rpn_cls: 0.02073  loss_rpn_loc: 0.0594    time: 0.5777  last_time: 0.5413  data_time: 0.0699  last_data_time: 0.0582   lr: 0.02  max_mem: 9164M
[03/01 20:05:35 d2.utils.events]:  eta: 0:02:53  iter: 1199  total_loss: 0.5704  loss_cls: 0.1076  loss_box_reg: 0.1956  loss_mask: 0.1754  loss_rpn_cls: 0.0156  loss_rpn_loc: 0.06616    time: 0.5778  last_time: 0.5870  data_time: 0.0732  last_data_time: 0.0999   lr: 0.02  max_mem: 9164M
[03/01 20:05:47 d2.utils.events]:  eta: 0:02:41  iter: 1219  total_loss: 0.5463  loss_cls: 0.1078  loss_box_reg: 0.1971  loss_mask: 0.1769  loss_rpn_cls: 0.01601  loss_rpn_loc: 0.0536    time: 0.5778  last_time: 0.5643  data_time: 0.0612  last_data_time: 0.0522   lr: 0.02  max_mem: 9164M
[03/01 20:05:58 d2.utils.events]:  eta: 0:02:30  iter: 1239  total_loss: 0.5649  loss_cls: 0.1101  loss_box_reg: 0.1978  loss_mask: 0.1707  loss_rpn_cls: 0.01751  loss_rpn_loc: 0.06334    time: 0.5781  last_time: 0.6051  data_time: 0.0711  last_data_time: 0.0838   lr: 0.02  max_mem: 9164M
[03/01 20:06:10 d2.utils.events]:  eta: 0:02:18  iter: 1259  total_loss: 0.5262  loss_cls: 0.1045  loss_box_reg: 0.1731  loss_mask: 0.1748  loss_rpn_cls: 0.01699  loss_rpn_loc: 0.05663    time: 0.5783  last_time: 0.5896  data_time: 0.0707  last_data_time: 0.0706   lr: 0.02  max_mem: 9164M
[03/01 20:06:22 d2.utils.events]:  eta: 0:02:07  iter: 1279  total_loss: 0.5002  loss_cls: 0.09518  loss_box_reg: 0.1771  loss_mask: 0.1546  loss_rpn_cls: 0.01321  loss_rpn_loc: 0.04511    time: 0.5782  last_time: 0.5505  data_time: 0.0634  last_data_time: 0.0391   lr: 0.02  max_mem: 9164M
[03/01 20:06:34 d2.utils.events]:  eta: 0:01:55  iter: 1299  total_loss: 0.5022  loss_cls: 0.09968  loss_box_reg: 0.1835  loss_mask: 0.1529  loss_rpn_cls: 0.01561  loss_rpn_loc: 0.0535    time: 0.5785  last_time: 0.5994  data_time: 0.0669  last_data_time: 0.0679   lr: 0.02  max_mem: 9164M
[03/01 20:06:45 d2.utils.events]:  eta: 0:01:44  iter: 1319  total_loss: 0.5244  loss_cls: 0.09192  loss_box_reg: 0.176  loss_mask: 0.1616  loss_rpn_cls: 0.01369  loss_rpn_loc: 0.06157    time: 0.5786  last_time: 0.5437  data_time: 0.0693  last_data_time: 0.0635   lr: 0.02  max_mem: 9164M
[03/01 20:06:57 d2.utils.events]:  eta: 0:01:32  iter: 1339  total_loss: 0.4849  loss_cls: 0.09139  loss_box_reg: 0.176  loss_mask: 0.1555  loss_rpn_cls: 0.01178  loss_rpn_loc: 0.05098    time: 0.5789  last_time: 0.6273  data_time: 0.0704  last_data_time: 0.0841   lr: 0.02  max_mem: 9164M
[03/01 20:07:09 d2.utils.events]:  eta: 0:01:21  iter: 1359  total_loss: 0.4985  loss_cls: 0.09557  loss_box_reg: 0.1765  loss_mask: 0.169  loss_rpn_cls: 0.01228  loss_rpn_loc: 0.04846    time: 0.5790  last_time: 0.6349  data_time: 0.0620  last_data_time: 0.0571   lr: 0.02  max_mem: 9164M
[03/01 20:07:21 d2.utils.events]:  eta: 0:01:09  iter: 1379  total_loss: 0.489  loss_cls: 0.09034  loss_box_reg: 0.1702  loss_mask: 0.1614  loss_rpn_cls: 0.01386  loss_rpn_loc: 0.05395    time: 0.5791  last_time: 0.5791  data_time: 0.0651  last_data_time: 0.0777   lr: 0.02  max_mem: 9164M
[03/01 20:07:32 d2.utils.events]:  eta: 0:00:58  iter: 1399  total_loss: 0.5139  loss_cls: 0.09739  loss_box_reg: 0.1775  loss_mask: 0.1576  loss_rpn_cls: 0.01276  loss_rpn_loc: 0.06278    time: 0.5791  last_time: 0.5849  data_time: 0.0617  last_data_time: 0.0698   lr: 0.02  max_mem: 9164M
[03/01 20:07:44 d2.utils.events]:  eta: 0:00:46  iter: 1419  total_loss: 0.5085  loss_cls: 0.0918  loss_box_reg: 0.1674  loss_mask: 0.1598  loss_rpn_cls: 0.01355  loss_rpn_loc: 0.05121    time: 0.5793  last_time: 0.6269  data_time: 0.0714  last_data_time: 0.0921   lr: 0.02  max_mem: 9164M
[03/01 20:07:56 d2.utils.events]:  eta: 0:00:34  iter: 1439  total_loss: 0.4829  loss_cls: 0.08943  loss_box_reg: 0.1551  loss_mask: 0.1576  loss_rpn_cls: 0.01196  loss_rpn_loc: 0.0589    time: 0.5796  last_time: 0.5700  data_time: 0.0701  last_data_time: 0.0804   lr: 0.02  max_mem: 9164M
[03/01 20:08:08 d2.utils.events]:  eta: 0:00:23  iter: 1459  total_loss: 0.4772  loss_cls: 0.0891  loss_box_reg: 0.1638  loss_mask: 0.1531  loss_rpn_cls: 0.01349  loss_rpn_loc: 0.05345    time: 0.5797  last_time: 0.5548  data_time: 0.0678  last_data_time: 0.0776   lr: 0.02  max_mem: 9164M
[03/01 20:08:20 d2.utils.events]:  eta: 0:00:11  iter: 1479  total_loss: 0.5447  loss_cls: 0.09746  loss_box_reg: 0.1858  loss_mask: 0.1598  loss_rpn_cls: 0.01526  loss_rpn_loc: 0.06138    time: 0.5798  last_time: 0.5779  data_time: 0.0608  last_data_time: 0.0385   lr: 0.02  max_mem: 9164M
[03/01 20:08:34 d2.utils.events]:  eta: 0:00:00  iter: 1499  total_loss: 0.4833  loss_cls: 0.09239  loss_box_reg: 0.18  loss_mask: 0.152  loss_rpn_cls: 0.0123  loss_rpn_loc: 0.05492    time: 0.5800  last_time: 0.6218  data_time: 0.0715  last_data_time: 0.0802   lr: 0.02  max_mem: 9164M
[03/01 20:08:34 d2.engine.hooks]: Overall training speed: 1498 iterations in 0:14:28 (0.5800 s / it)
[03/01 20:08:34 d2.engine.hooks]: Total training time: 0:14:40 (0:00:11 on hooks)
[03/01 20:08:40 d2.data.build]: Distribution of instances among all 11 categories:
|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
| background | 0            |    car     | 8021         | pedestrian | 3347         |
|            | 0            |            | 0            |            | 0            |
|            | 0            |            | 0            |            | 0            |
|            | 0            |   ignore   | 2765         |            |              |
|   total    | 14133        |            |              |            |              |
[03/01 20:08:40 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[03/01 20:08:40 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/01 20:08:40 d2.data.common]: Serializing 2919 elements to byte tensors and concatenating them all ...
[03/01 20:08:40 d2.data.common]: Serialized dataset takes 5.86 MiB
WARNING [03/01 20:08:40 d2.engine.defaults]: No evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
[03/01 20:08:41 d2.checkpoint.detection_checkpoint]: [DetectionCheckpointer] Loading from /ghome/group07/C5-W2/lr_0_02_bs_32_is_8/model_0001499.pth ...
[03/01 20:08:45 d2.evaluation.coco_evaluation]: Trying to convert 'KITTI-MOTS_val' to COCO format ...
[03/01 20:08:45 d2.data.datasets.coco]: Converting annotations of dataset 'KITTI-MOTS_val' to COCO format ...)
[03/01 20:08:47 d2.data.datasets.coco]: Converting dataset dicts into COCO format
[03/01 20:08:47 d2.data.datasets.coco]: Conversion finished, #images: 2919, #annotations: 14133
[03/01 20:08:47 d2.data.datasets.coco]: Caching COCO format annotations at '/ghome/group07/C5-W2/lr_0_02_bs_32_is_8/KITTI-MOTS_val_coco_format.json' ...
[03/01 20:08:49 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[03/01 20:08:49 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/01 20:08:49 d2.data.common]: Serializing 2919 elements to byte tensors and concatenating them all ...
[03/01 20:08:50 d2.data.common]: Serialized dataset takes 5.86 MiB
[03/01 20:08:50 d2.evaluation.evaluator]: Start inference on 2919 batches
[03/01 20:08:52 d2.evaluation.evaluator]: Inference done 11/2919. Dataloading: 0.0018 s/iter. Inference: 0.0736 s/iter. Eval: 0.0044 s/iter. Total: 0.0798 s/iter. ETA=0:03:52
[03/01 20:08:57 d2.evaluation.evaluator]: Inference done 103/2919. Dataloading: 0.0026 s/iter. Inference: 0.0503 s/iter. Eval: 0.0035 s/iter. Total: 0.0565 s/iter. ETA=0:02:39
[03/01 20:09:02 d2.evaluation.evaluator]: Inference done 196/2919. Dataloading: 0.0027 s/iter. Inference: 0.0492 s/iter. Eval: 0.0034 s/iter. Total: 0.0554 s/iter. ETA=0:02:30
[03/01 20:09:07 d2.evaluation.evaluator]: Inference done 290/2919. Dataloading: 0.0027 s/iter. Inference: 0.0486 s/iter. Eval: 0.0034 s/iter. Total: 0.0547 s/iter. ETA=0:02:23
[03/01 20:09:12 d2.evaluation.evaluator]: Inference done 386/2919. Dataloading: 0.0027 s/iter. Inference: 0.0482 s/iter. Eval: 0.0032 s/iter. Total: 0.0541 s/iter. ETA=0:02:17
[03/01 20:09:17 d2.evaluation.evaluator]: Inference done 483/2919. Dataloading: 0.0027 s/iter. Inference: 0.0478 s/iter. Eval: 0.0031 s/iter. Total: 0.0537 s/iter. ETA=0:02:10
[03/01 20:09:22 d2.evaluation.evaluator]: Inference done 576/2919. Dataloading: 0.0027 s/iter. Inference: 0.0478 s/iter. Eval: 0.0032 s/iter. Total: 0.0538 s/iter. ETA=0:02:05
[03/01 20:09:27 d2.evaluation.evaluator]: Inference done 667/2919. Dataloading: 0.0027 s/iter. Inference: 0.0480 s/iter. Eval: 0.0032 s/iter. Total: 0.0540 s/iter. ETA=0:02:01
[03/01 20:09:32 d2.evaluation.evaluator]: Inference done 755/2919. Dataloading: 0.0027 s/iter. Inference: 0.0483 s/iter. Eval: 0.0033 s/iter. Total: 0.0543 s/iter. ETA=0:01:57
[03/01 20:09:37 d2.evaluation.evaluator]: Inference done 847/2919. Dataloading: 0.0027 s/iter. Inference: 0.0483 s/iter. Eval: 0.0033 s/iter. Total: 0.0544 s/iter. ETA=0:01:52
[03/01 20:09:42 d2.evaluation.evaluator]: Inference done 938/2919. Dataloading: 0.0028 s/iter. Inference: 0.0484 s/iter. Eval: 0.0033 s/iter. Total: 0.0545 s/iter. ETA=0:01:47
[03/01 20:09:47 d2.evaluation.evaluator]: Inference done 1029/2919. Dataloading: 0.0028 s/iter. Inference: 0.0484 s/iter. Eval: 0.0033 s/iter. Total: 0.0545 s/iter. ETA=0:01:43
[03/01 20:09:52 d2.evaluation.evaluator]: Inference done 1120/2919. Dataloading: 0.0028 s/iter. Inference: 0.0484 s/iter. Eval: 0.0033 s/iter. Total: 0.0546 s/iter. ETA=0:01:38
[03/01 20:09:57 d2.evaluation.evaluator]: Inference done 1210/2919. Dataloading: 0.0028 s/iter. Inference: 0.0485 s/iter. Eval: 0.0033 s/iter. Total: 0.0547 s/iter. ETA=0:01:33
[03/01 20:10:02 d2.evaluation.evaluator]: Inference done 1299/2919. Dataloading: 0.0028 s/iter. Inference: 0.0486 s/iter. Eval: 0.0033 s/iter. Total: 0.0548 s/iter. ETA=0:01:28
[03/01 20:10:07 d2.evaluation.evaluator]: Inference done 1390/2919. Dataloading: 0.0028 s/iter. Inference: 0.0486 s/iter. Eval: 0.0033 s/iter. Total: 0.0548 s/iter. ETA=0:01:23
[03/01 20:10:12 d2.evaluation.evaluator]: Inference done 1473/2919. Dataloading: 0.0028 s/iter. Inference: 0.0490 s/iter. Eval: 0.0033 s/iter. Total: 0.0551 s/iter. ETA=0:01:19
[03/01 20:10:17 d2.evaluation.evaluator]: Inference done 1565/2919. Dataloading: 0.0027 s/iter. Inference: 0.0490 s/iter. Eval: 0.0033 s/iter. Total: 0.0551 s/iter. ETA=0:01:14
[03/01 20:10:22 d2.evaluation.evaluator]: Inference done 1657/2919. Dataloading: 0.0027 s/iter. Inference: 0.0490 s/iter. Eval: 0.0033 s/iter. Total: 0.0551 s/iter. ETA=0:01:09
[03/01 20:10:28 d2.evaluation.evaluator]: Inference done 1745/2919. Dataloading: 0.0027 s/iter. Inference: 0.0490 s/iter. Eval: 0.0034 s/iter. Total: 0.0552 s/iter. ETA=0:01:04
[03/01 20:10:33 d2.evaluation.evaluator]: Inference done 1834/2919. Dataloading: 0.0027 s/iter. Inference: 0.0491 s/iter. Eval: 0.0034 s/iter. Total: 0.0552 s/iter. ETA=0:00:59
[03/01 20:10:38 d2.evaluation.evaluator]: Inference done 1926/2919. Dataloading: 0.0027 s/iter. Inference: 0.0490 s/iter. Eval: 0.0034 s/iter. Total: 0.0552 s/iter. ETA=0:00:54
[03/01 20:10:43 d2.evaluation.evaluator]: Inference done 2019/2919. Dataloading: 0.0027 s/iter. Inference: 0.0490 s/iter. Eval: 0.0034 s/iter. Total: 0.0552 s/iter. ETA=0:00:49
[03/01 20:10:48 d2.evaluation.evaluator]: Inference done 2110/2919. Dataloading: 0.0027 s/iter. Inference: 0.0490 s/iter. Eval: 0.0034 s/iter. Total: 0.0552 s/iter. ETA=0:00:44
[03/01 20:10:53 d2.evaluation.evaluator]: Inference done 2200/2919. Dataloading: 0.0027 s/iter. Inference: 0.0490 s/iter. Eval: 0.0035 s/iter. Total: 0.0552 s/iter. ETA=0:00:39
[03/01 20:10:58 d2.evaluation.evaluator]: Inference done 2288/2919. Dataloading: 0.0027 s/iter. Inference: 0.0490 s/iter. Eval: 0.0035 s/iter. Total: 0.0553 s/iter. ETA=0:00:34
[03/01 20:11:03 d2.evaluation.evaluator]: Inference done 2375/2919. Dataloading: 0.0027 s/iter. Inference: 0.0491 s/iter. Eval: 0.0036 s/iter. Total: 0.0554 s/iter. ETA=0:00:30
[03/01 20:11:08 d2.evaluation.evaluator]: Inference done 2458/2919. Dataloading: 0.0027 s/iter. Inference: 0.0491 s/iter. Eval: 0.0037 s/iter. Total: 0.0556 s/iter. ETA=0:00:25
[03/01 20:11:13 d2.evaluation.evaluator]: Inference done 2540/2919. Dataloading: 0.0027 s/iter. Inference: 0.0491 s/iter. Eval: 0.0039 s/iter. Total: 0.0557 s/iter. ETA=0:00:21
[03/01 20:11:18 d2.evaluation.evaluator]: Inference done 2627/2919. Dataloading: 0.0027 s/iter. Inference: 0.0491 s/iter. Eval: 0.0039 s/iter. Total: 0.0558 s/iter. ETA=0:00:16
[03/01 20:11:23 d2.evaluation.evaluator]: Inference done 2720/2919. Dataloading: 0.0027 s/iter. Inference: 0.0490 s/iter. Eval: 0.0039 s/iter. Total: 0.0557 s/iter. ETA=0:00:11
[03/01 20:11:28 d2.evaluation.evaluator]: Inference done 2814/2919. Dataloading: 0.0027 s/iter. Inference: 0.0490 s/iter. Eval: 0.0040 s/iter. Total: 0.0557 s/iter. ETA=0:00:05
[03/01 20:11:33 d2.evaluation.evaluator]: Inference done 2904/2919. Dataloading: 0.0027 s/iter. Inference: 0.0489 s/iter. Eval: 0.0040 s/iter. Total: 0.0557 s/iter. ETA=0:00:00
[03/01 20:11:34 d2.evaluation.evaluator]: Total inference time: 0:02:42.165362 (0.055650 s / iter per device, on 1 devices)
[03/01 20:11:34 d2.evaluation.evaluator]: Total inference pure compute time: 0:02:22 (0.048900 s / iter per device, on 1 devices)
[03/01 20:11:34 d2.evaluation.coco_evaluation]: Preparing results for COCO format ...
[03/01 20:11:34 d2.evaluation.coco_evaluation]: Saving results to /ghome/group07/C5-W2/lr_0_02_bs_32_is_8/coco_instances_results.json
[03/01 20:11:34 d2.evaluation.coco_evaluation]: Evaluating predictions with unofficial COCO API...
Loading and preparing results...
DONE (t=0.02s)
creating index...
index created!
[03/01 20:11:34 d2.evaluation.fast_eval_api]: Evaluate annotation type *bbox*
[03/01 20:11:35 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 0.79 seconds.
[03/01 20:11:35 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[03/01 20:11:35 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.11 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.412
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.600
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.461
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.269
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.488
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.512
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.170
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.477
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.480
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.315
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.540
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.644
[03/01 20:11:35 d2.evaluation.coco_evaluation]: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 41.209 | 60.029 | 46.142 | 26.927 | 48.826 | 51.179 |
[03/01 20:11:35 d2.evaluation.coco_evaluation]: Per-category bbox AP: 
| category   | AP   | category   | AP     | category   | AP     |
|:-----------|:-----|:-----------|:-------|:-----------|:-------|
| background | nan  | car        | 67.166 | pedestrian | 50.540 |
|            | nan  |            | nan    |            | nan    |
|            | nan  |            | nan    |            | nan    |
|            | nan  | ignore     | 5.920  |            |        |
Loading and preparing results...
DONE (t=0.16s)
creating index...
index created!
[03/01 20:11:35 d2.evaluation.fast_eval_api]: Evaluate annotation type *segm*
[03/01 20:11:36 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 1.02 seconds.
[03/01 20:11:36 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[03/01 20:11:36 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.08 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.377
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.556
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.424
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.226
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.442
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.520
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.145
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.431
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.432
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.284
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.487
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.590
[03/01 20:11:36 d2.evaluation.coco_evaluation]: Evaluation results for segm: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 37.651 | 55.598 | 42.449 | 22.574 | 44.182 | 52.037 |
[03/01 20:11:36 d2.evaluation.coco_evaluation]: Per-category segm AP: 
| category   | AP   | category   | AP     | category   | AP     |
|:-----------|:-----|:-----------|:-------|:-----------|:-------|
| background | nan  | car        | 67.850 | pedestrian | 42.224 |
|            | nan  |            | nan    |            | nan    |
|            | nan  |            | nan    |            | nan    |
|            | nan  | ignore     | 2.880  |            |        |
OrderedDict([('bbox', {'AP': 41.20850662785166, 'AP50': 60.02915718130244, 'AP75': 46.14155675113988, 'APs': 26.927387650726192, 'APm': 48.82596483146436, 'APl': 51.17892801229221, 'AP-background': nan, 'AP-car': 67.16594021159099, 'AP-pedestrian': 50.53987721546637, 'AP-': nan, 'AP-ignore': 5.919702456497633}), ('segm', {'AP': 37.65115013091571, 'AP50': 55.59813268198405, 'AP75': 42.449476010832086, 'APs': 22.57429468023177, 'APm': 44.18220046938535, 'APl': 52.03654471654028, 'AP-background': nan, 'AP-car': 67.84967595722368, 'AP-pedestrian': 42.223782052841266, 'AP-': nan, 'AP-ignore': 2.879992382682207})])
