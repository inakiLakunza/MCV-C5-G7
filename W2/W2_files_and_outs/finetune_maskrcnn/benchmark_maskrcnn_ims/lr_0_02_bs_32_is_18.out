1
The device we will be working on is: cuda
[03/01 20:56:03 d2.engine.defaults]: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=12, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=44, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 11, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[03/01 20:56:07 d2.data.build]: Removed 0 images with no usable annotations. 5007 images left.
[03/01 20:56:07 d2.data.build]: Distribution of instances among all 11 categories:
|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
| background | 0            |    car     | 18822        | pedestrian | 8065         |
|            | 0            |            | 0            |            | 0            |
|            | 0            |            | 0            |            | 0            |
|            | 0            |   ignore   | 4977         |            |              |
|   total    | 31864        |            |              |            |              |
[03/01 20:56:07 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[03/01 20:56:07 d2.data.build]: Using training sampler TrainingSampler
[03/01 20:56:07 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/01 20:56:07 d2.data.common]: Serializing 5007 elements to byte tensors and concatenating them all ...
[03/01 20:56:07 d2.data.common]: Serialized dataset takes 13.56 MiB
[03/01 20:56:07 d2.data.build]: Making batched data loader with batch_size=18
WARNING [03/01 20:56:07 d2.solver.build]: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[03/01 20:56:07 d2.checkpoint.detection_checkpoint]: [DetectionCheckpointer] Loading from https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl ...
[03/01 20:56:07 d2.engine.train_loop]: Starting training from iteration 0
[03/01 20:56:45 d2.utils.events]:  eta: 0:33:59  iter: 19  total_loss: 3.201  loss_cls: 1.941  loss_box_reg: 0.4778  loss_mask: 0.6568  loss_rpn_cls: 0.1337  loss_rpn_loc: 0.08821    time: 1.4435  last_time: 1.3637  data_time: 0.6917  last_data_time: 0.4168   lr: 0.00039962  max_mem: 17409M
[03/01 20:57:25 d2.utils.events]:  eta: 0:34:07  iter: 39  total_loss: 1.484  loss_cls: 0.493  loss_box_reg: 0.4326  loss_mask: 0.4508  loss_rpn_cls: 0.06165  loss_rpn_loc: 0.08194    time: 1.5419  last_time: 1.5236  data_time: 0.5755  last_data_time: 0.5402   lr: 0.00079922  max_mem: 17525M
[03/01 20:57:53 d2.utils.events]:  eta: 0:33:31  iter: 59  total_loss: 1.159  loss_cls: 0.2987  loss_box_reg: 0.387  loss_mask: 0.3205  loss_rpn_cls: 0.05036  loss_rpn_loc: 0.09037    time: 1.4934  last_time: 1.2977  data_time: 0.3955  last_data_time: 0.3451   lr: 0.0011988  max_mem: 17525M
[03/01 20:58:21 d2.utils.events]:  eta: 0:33:11  iter: 79  total_loss: 0.9723  loss_cls: 0.2374  loss_box_reg: 0.292  loss_mask: 0.2771  loss_rpn_cls: 0.0391  loss_rpn_loc: 0.07184    time: 1.4725  last_time: 1.2635  data_time: 0.4115  last_data_time: 0.3358   lr: 0.0015984  max_mem: 17899M
[03/01 20:58:49 d2.utils.events]:  eta: 0:32:31  iter: 99  total_loss: 0.7848  loss_cls: 0.1781  loss_box_reg: 0.2316  loss_mask: 0.2674  loss_rpn_cls: 0.03845  loss_rpn_loc: 0.07299    time: 1.4513  last_time: 1.4333  data_time: 0.3866  last_data_time: 0.4292   lr: 0.001998  max_mem: 17899M
[03/01 20:59:17 d2.utils.events]:  eta: 0:32:03  iter: 119  total_loss: 0.7552  loss_cls: 0.1578  loss_box_reg: 0.2362  loss_mask: 0.2511  loss_rpn_cls: 0.03365  loss_rpn_loc: 0.07517    time: 1.4430  last_time: 1.3868  data_time: 0.4107  last_data_time: 0.4019   lr: 0.0023976  max_mem: 17899M
[03/01 20:59:45 d2.utils.events]:  eta: 0:31:37  iter: 139  total_loss: 0.7014  loss_cls: 0.1428  loss_box_reg: 0.2097  loss_mask: 0.2279  loss_rpn_cls: 0.02934  loss_rpn_loc: 0.06652    time: 1.4379  last_time: 1.3568  data_time: 0.4289  last_data_time: 0.3878   lr: 0.0027972  max_mem: 17899M
[03/01 21:00:12 d2.utils.events]:  eta: 0:31:04  iter: 159  total_loss: 0.6881  loss_cls: 0.134  loss_box_reg: 0.2046  loss_mask: 0.2348  loss_rpn_cls: 0.0284  loss_rpn_loc: 0.07277    time: 1.4307  last_time: 1.5220  data_time: 0.4050  last_data_time: 0.5462   lr: 0.0031968  max_mem: 17899M
[03/01 21:00:41 d2.utils.events]:  eta: 0:30:36  iter: 179  total_loss: 0.6909  loss_cls: 0.1371  loss_box_reg: 0.2055  loss_mask: 0.2394  loss_rpn_cls: 0.02832  loss_rpn_loc: 0.07169    time: 1.4289  last_time: 1.3829  data_time: 0.4307  last_data_time: 0.4082   lr: 0.0035964  max_mem: 17899M
[03/01 21:01:09 d2.utils.events]:  eta: 0:30:13  iter: 199  total_loss: 0.711  loss_cls: 0.1482  loss_box_reg: 0.2277  loss_mask: 0.2258  loss_rpn_cls: 0.03146  loss_rpn_loc: 0.07607    time: 1.4284  last_time: 1.3916  data_time: 0.4143  last_data_time: 0.4151   lr: 0.003996  max_mem: 17899M
[03/01 21:01:37 d2.utils.events]:  eta: 0:29:41  iter: 219  total_loss: 0.6737  loss_cls: 0.1285  loss_box_reg: 0.1886  loss_mask: 0.2266  loss_rpn_cls: 0.03016  loss_rpn_loc: 0.06928    time: 1.4235  last_time: 1.2498  data_time: 0.3971  last_data_time: 0.3350   lr: 0.0043956  max_mem: 17899M
[03/01 21:02:04 d2.utils.events]:  eta: 0:29:06  iter: 239  total_loss: 0.6574  loss_cls: 0.1293  loss_box_reg: 0.1873  loss_mask: 0.2227  loss_rpn_cls: 0.03027  loss_rpn_loc: 0.07809    time: 1.4180  last_time: 1.3460  data_time: 0.3935  last_data_time: 0.3627   lr: 0.0047952  max_mem: 17899M
[03/01 21:02:31 d2.utils.events]:  eta: 0:28:36  iter: 259  total_loss: 0.6415  loss_cls: 0.1298  loss_box_reg: 0.1914  loss_mask: 0.2191  loss_rpn_cls: 0.02536  loss_rpn_loc: 0.07301    time: 1.4125  last_time: 1.2551  data_time: 0.3785  last_data_time: 0.3052   lr: 0.0051948  max_mem: 17899M
[03/01 21:02:58 d2.utils.events]:  eta: 0:28:05  iter: 279  total_loss: 0.5983  loss_cls: 0.1272  loss_box_reg: 0.1871  loss_mask: 0.2056  loss_rpn_cls: 0.0212  loss_rpn_loc: 0.07077    time: 1.4094  last_time: 1.4216  data_time: 0.3788  last_data_time: 0.4318   lr: 0.0055944  max_mem: 17899M
[03/01 21:03:26 d2.utils.events]:  eta: 0:27:33  iter: 299  total_loss: 0.62  loss_cls: 0.1265  loss_box_reg: 0.1908  loss_mask: 0.2051  loss_rpn_cls: 0.02023  loss_rpn_loc: 0.05952    time: 1.4068  last_time: 1.3598  data_time: 0.3767  last_data_time: 0.3753   lr: 0.005994  max_mem: 17899M
[03/01 21:03:54 d2.utils.events]:  eta: 0:27:07  iter: 319  total_loss: 0.6103  loss_cls: 0.1275  loss_box_reg: 0.1973  loss_mask: 0.204  loss_rpn_cls: 0.02168  loss_rpn_loc: 0.06096    time: 1.4071  last_time: 1.3658  data_time: 0.3995  last_data_time: 0.3683   lr: 0.0063936  max_mem: 17997M
[03/01 21:04:23 d2.utils.events]:  eta: 0:26:43  iter: 339  total_loss: 0.6136  loss_cls: 0.1276  loss_box_reg: 0.1958  loss_mask: 0.1918  loss_rpn_cls: 0.02154  loss_rpn_loc: 0.06356    time: 1.4087  last_time: 1.4557  data_time: 0.4104  last_data_time: 0.3962   lr: 0.0067932  max_mem: 17997M
[03/01 21:04:51 d2.utils.events]:  eta: 0:26:16  iter: 359  total_loss: 0.5867  loss_cls: 0.1188  loss_box_reg: 0.1871  loss_mask: 0.1911  loss_rpn_cls: 0.02095  loss_rpn_loc: 0.06024    time: 1.4080  last_time: 1.3064  data_time: 0.3937  last_data_time: 0.3263   lr: 0.0071928  max_mem: 18241M
[03/01 21:05:19 d2.utils.events]:  eta: 0:25:49  iter: 379  total_loss: 0.6038  loss_cls: 0.1242  loss_box_reg: 0.1999  loss_mask: 0.1962  loss_rpn_cls: 0.01969  loss_rpn_loc: 0.05792    time: 1.4083  last_time: 1.4547  data_time: 0.4034  last_data_time: 0.4150   lr: 0.0075924  max_mem: 18241M
[03/01 21:05:47 d2.utils.events]:  eta: 0:25:22  iter: 399  total_loss: 0.5824  loss_cls: 0.116  loss_box_reg: 0.1891  loss_mask: 0.1968  loss_rpn_cls: 0.01862  loss_rpn_loc: 0.06361    time: 1.4080  last_time: 1.4027  data_time: 0.3924  last_data_time: 0.4205   lr: 0.007992  max_mem: 18241M
[03/01 21:06:15 d2.utils.events]:  eta: 0:24:56  iter: 419  total_loss: 0.6117  loss_cls: 0.1185  loss_box_reg: 0.1975  loss_mask: 0.191  loss_rpn_cls: 0.02215  loss_rpn_loc: 0.06819    time: 1.4081  last_time: 1.4128  data_time: 0.4036  last_data_time: 0.3935   lr: 0.0083916  max_mem: 18241M
[03/01 21:06:43 d2.utils.events]:  eta: 0:24:29  iter: 439  total_loss: 0.5871  loss_cls: 0.117  loss_box_reg: 0.1924  loss_mask: 0.1906  loss_rpn_cls: 0.01724  loss_rpn_loc: 0.06934    time: 1.4072  last_time: 1.3508  data_time: 0.3827  last_data_time: 0.3468   lr: 0.0087912  max_mem: 18241M
[03/01 21:07:11 d2.utils.events]:  eta: 0:24:01  iter: 459  total_loss: 0.575  loss_cls: 0.1119  loss_box_reg: 0.1891  loss_mask: 0.189  loss_rpn_cls: 0.01982  loss_rpn_loc: 0.05899    time: 1.4062  last_time: 1.3226  data_time: 0.3799  last_data_time: 0.3225   lr: 0.0091908  max_mem: 18241M
[03/01 21:07:39 d2.utils.events]:  eta: 0:23:33  iter: 479  total_loss: 0.5839  loss_cls: 0.1229  loss_box_reg: 0.1992  loss_mask: 0.1913  loss_rpn_cls: 0.01851  loss_rpn_loc: 0.06426    time: 1.4063  last_time: 1.3108  data_time: 0.3997  last_data_time: 0.2965   lr: 0.0095904  max_mem: 18241M
[03/01 21:08:08 d2.utils.events]:  eta: 0:23:05  iter: 499  total_loss: 0.5631  loss_cls: 0.1087  loss_box_reg: 0.1826  loss_mask: 0.177  loss_rpn_cls: 0.01779  loss_rpn_loc: 0.05698    time: 1.4061  last_time: 1.3975  data_time: 0.3846  last_data_time: 0.3781   lr: 0.00999  max_mem: 18291M
[03/01 21:08:36 d2.utils.events]:  eta: 0:22:38  iter: 519  total_loss: 0.5883  loss_cls: 0.1145  loss_box_reg: 0.1968  loss_mask: 0.1774  loss_rpn_cls: 0.02067  loss_rpn_loc: 0.0647    time: 1.4063  last_time: 1.3917  data_time: 0.3913  last_data_time: 0.3515   lr: 0.01039  max_mem: 18406M
[03/01 21:09:05 d2.utils.events]:  eta: 0:22:11  iter: 539  total_loss: 0.572  loss_cls: 0.1165  loss_box_reg: 0.1895  loss_mask: 0.1825  loss_rpn_cls: 0.02075  loss_rpn_loc: 0.06142    time: 1.4084  last_time: 1.3747  data_time: 0.4227  last_data_time: 0.3501   lr: 0.010789  max_mem: 19075M
[03/01 21:09:33 d2.utils.events]:  eta: 0:21:44  iter: 559  total_loss: 0.5548  loss_cls: 0.1077  loss_box_reg: 0.1826  loss_mask: 0.1825  loss_rpn_cls: 0.01608  loss_rpn_loc: 0.05719    time: 1.4079  last_time: 1.3739  data_time: 0.3888  last_data_time: 0.3977   lr: 0.011189  max_mem: 19075M
[03/01 21:10:01 d2.utils.events]:  eta: 0:21:15  iter: 579  total_loss: 0.5407  loss_cls: 0.1019  loss_box_reg: 0.1783  loss_mask: 0.1721  loss_rpn_cls: 0.01534  loss_rpn_loc: 0.05308    time: 1.4073  last_time: 1.3771  data_time: 0.3739  last_data_time: 0.3487   lr: 0.011588  max_mem: 19075M
[03/01 21:10:29 d2.utils.events]:  eta: 0:20:48  iter: 599  total_loss: 0.5353  loss_cls: 0.1099  loss_box_reg: 0.1795  loss_mask: 0.1735  loss_rpn_cls: 0.01449  loss_rpn_loc: 0.05527    time: 1.4076  last_time: 1.4286  data_time: 0.3816  last_data_time: 0.4260   lr: 0.011988  max_mem: 19075M
[03/01 21:10:57 d2.utils.events]:  eta: 0:20:21  iter: 619  total_loss: 0.5437  loss_cls: 0.1041  loss_box_reg: 0.1787  loss_mask: 0.1725  loss_rpn_cls: 0.01436  loss_rpn_loc: 0.0637    time: 1.4077  last_time: 1.3795  data_time: 0.3908  last_data_time: 0.3425   lr: 0.012388  max_mem: 19075M
[03/01 21:11:26 d2.utils.events]:  eta: 0:19:54  iter: 639  total_loss: 0.522  loss_cls: 0.1026  loss_box_reg: 0.174  loss_mask: 0.1768  loss_rpn_cls: 0.01323  loss_rpn_loc: 0.05833    time: 1.4079  last_time: 1.3655  data_time: 0.4005  last_data_time: 0.3367   lr: 0.012787  max_mem: 19075M
[03/01 21:11:54 d2.utils.events]:  eta: 0:19:26  iter: 659  total_loss: 0.519  loss_cls: 0.1009  loss_box_reg: 0.1771  loss_mask: 0.1686  loss_rpn_cls: 0.01505  loss_rpn_loc: 0.05823    time: 1.4085  last_time: 1.4633  data_time: 0.4006  last_data_time: 0.3909   lr: 0.013187  max_mem: 19075M
[03/01 21:12:24 d2.utils.events]:  eta: 0:19:00  iter: 679  total_loss: 0.5403  loss_cls: 0.1062  loss_box_reg: 0.1806  loss_mask: 0.1813  loss_rpn_cls: 0.01651  loss_rpn_loc: 0.05807    time: 1.4103  last_time: 1.4212  data_time: 0.4342  last_data_time: 0.3870   lr: 0.013586  max_mem: 19075M
[03/01 21:12:53 d2.utils.events]:  eta: 0:18:33  iter: 699  total_loss: 0.5452  loss_cls: 0.1093  loss_box_reg: 0.1889  loss_mask: 0.1764  loss_rpn_cls: 0.01527  loss_rpn_loc: 0.06704    time: 1.4111  last_time: 1.4634  data_time: 0.3928  last_data_time: 0.3844   lr: 0.013986  max_mem: 19075M
[03/01 21:13:21 d2.utils.events]:  eta: 0:18:06  iter: 719  total_loss: 0.5027  loss_cls: 0.09194  loss_box_reg: 0.1747  loss_mask: 0.1713  loss_rpn_cls: 0.01448  loss_rpn_loc: 0.05133    time: 1.4110  last_time: 1.3949  data_time: 0.3777  last_data_time: 0.3906   lr: 0.014386  max_mem: 19075M
[03/01 21:13:48 d2.utils.events]:  eta: 0:17:38  iter: 739  total_loss: 0.5035  loss_cls: 0.09765  loss_box_reg: 0.1625  loss_mask: 0.1717  loss_rpn_cls: 0.01309  loss_rpn_loc: 0.05453    time: 1.4103  last_time: 1.4120  data_time: 0.3627  last_data_time: 0.3471   lr: 0.014785  max_mem: 19075M
[03/01 21:14:17 d2.utils.events]:  eta: 0:17:10  iter: 759  total_loss: 0.531  loss_cls: 0.09962  loss_box_reg: 0.1819  loss_mask: 0.1743  loss_rpn_cls: 0.0164  loss_rpn_loc: 0.05718    time: 1.4105  last_time: 1.6681  data_time: 0.3907  last_data_time: 0.6125   lr: 0.015185  max_mem: 19075M
[03/01 21:14:45 d2.utils.events]:  eta: 0:16:42  iter: 779  total_loss: 0.534  loss_cls: 0.09419  loss_box_reg: 0.1753  loss_mask: 0.1703  loss_rpn_cls: 0.01624  loss_rpn_loc: 0.06539    time: 1.4109  last_time: 1.3685  data_time: 0.3999  last_data_time: 0.3724   lr: 0.015584  max_mem: 19075M
[03/01 21:15:14 d2.utils.events]:  eta: 0:16:15  iter: 799  total_loss: 0.5161  loss_cls: 0.09381  loss_box_reg: 0.1852  loss_mask: 0.1644  loss_rpn_cls: 0.01453  loss_rpn_loc: 0.05654    time: 1.4114  last_time: 1.3588  data_time: 0.3849  last_data_time: 0.3523   lr: 0.015984  max_mem: 19075M
[03/01 21:15:42 d2.utils.events]:  eta: 0:15:47  iter: 819  total_loss: 0.5209  loss_cls: 0.1005  loss_box_reg: 0.1776  loss_mask: 0.1666  loss_rpn_cls: 0.01838  loss_rpn_loc: 0.05561    time: 1.4115  last_time: 1.4085  data_time: 0.3826  last_data_time: 0.3950   lr: 0.016384  max_mem: 19075M
[03/01 21:16:12 d2.utils.events]:  eta: 0:15:20  iter: 839  total_loss: 0.5361  loss_cls: 0.09101  loss_box_reg: 0.1738  loss_mask: 0.1701  loss_rpn_cls: 0.01926  loss_rpn_loc: 0.05804    time: 1.4135  last_time: 1.3634  data_time: 0.4468  last_data_time: 0.3292   lr: 0.016783  max_mem: 19075M
[03/01 21:16:41 d2.utils.events]:  eta: 0:14:53  iter: 859  total_loss: 0.4965  loss_cls: 0.08703  loss_box_reg: 0.1746  loss_mask: 0.1597  loss_rpn_cls: 0.01203  loss_rpn_loc: 0.051    time: 1.4143  last_time: 1.5222  data_time: 0.4002  last_data_time: 0.4168   lr: 0.017183  max_mem: 19075M
[03/01 21:17:10 d2.utils.events]:  eta: 0:14:26  iter: 879  total_loss: 0.5198  loss_cls: 0.09935  loss_box_reg: 0.1878  loss_mask: 0.1649  loss_rpn_cls: 0.01256  loss_rpn_loc: 0.05342    time: 1.4149  last_time: 1.3828  data_time: 0.3840  last_data_time: 0.3495   lr: 0.017582  max_mem: 19075M
[03/01 21:17:39 d2.utils.events]:  eta: 0:13:58  iter: 899  total_loss: 0.5222  loss_cls: 0.09695  loss_box_reg: 0.1879  loss_mask: 0.166  loss_rpn_cls: 0.01292  loss_rpn_loc: 0.05395    time: 1.4158  last_time: 1.4894  data_time: 0.4048  last_data_time: 0.4337   lr: 0.017982  max_mem: 19075M
[03/01 21:18:08 d2.utils.events]:  eta: 0:13:31  iter: 919  total_loss: 0.489  loss_cls: 0.08712  loss_box_reg: 0.1658  loss_mask: 0.1608  loss_rpn_cls: 0.01252  loss_rpn_loc: 0.05636    time: 1.4160  last_time: 1.3710  data_time: 0.3797  last_data_time: 0.3352   lr: 0.018382  max_mem: 19075M
[03/01 21:18:37 d2.utils.events]:  eta: 0:13:03  iter: 939  total_loss: 0.4865  loss_cls: 0.09219  loss_box_reg: 0.1723  loss_mask: 0.1576  loss_rpn_cls: 0.01188  loss_rpn_loc: 0.05409    time: 1.4167  last_time: 1.4912  data_time: 0.3975  last_data_time: 0.4287   lr: 0.018781  max_mem: 19075M
[03/01 21:19:05 d2.utils.events]:  eta: 0:12:35  iter: 959  total_loss: 0.501  loss_cls: 0.09494  loss_box_reg: 0.1734  loss_mask: 0.1644  loss_rpn_cls: 0.01166  loss_rpn_loc: 0.05444    time: 1.4173  last_time: 1.4643  data_time: 0.3991  last_data_time: 0.4255   lr: 0.019181  max_mem: 19075M
[03/01 21:19:34 d2.utils.events]:  eta: 0:12:07  iter: 979  total_loss: 0.5072  loss_cls: 0.0921  loss_box_reg: 0.1783  loss_mask: 0.162  loss_rpn_cls: 0.01252  loss_rpn_loc: 0.05367    time: 1.4177  last_time: 1.3662  data_time: 0.3862  last_data_time: 0.3608   lr: 0.01958  max_mem: 19075M
[03/01 21:20:04 d2.utils.events]:  eta: 0:11:39  iter: 999  total_loss: 0.4835  loss_cls: 0.09076  loss_box_reg: 0.1631  loss_mask: 0.163  loss_rpn_cls: 0.01246  loss_rpn_loc: 0.05086    time: 1.4179  last_time: 1.3606  data_time: 0.3929  last_data_time: 0.3759   lr: 0.01998  max_mem: 19075M
[03/01 21:20:37 d2.utils.events]:  eta: 0:11:11  iter: 1019  total_loss: 0.4995  loss_cls: 0.08743  loss_box_reg: 0.1717  loss_mask: 0.1583  loss_rpn_cls: 0.01202  loss_rpn_loc: 0.05592    time: 1.4223  last_time: 5.9022  data_time: 0.3780  last_data_time: 0.3392   lr: 0.02  max_mem: 19075M
[03/01 21:21:06 d2.utils.events]:  eta: 0:10:44  iter: 1039  total_loss: 0.4923  loss_cls: 0.08756  loss_box_reg: 0.1657  loss_mask: 0.1547  loss_rpn_cls: 0.01514  loss_rpn_loc: 0.05974    time: 1.4233  last_time: 1.3451  data_time: 0.4297  last_data_time: 0.3218   lr: 0.02  max_mem: 19075M
[03/01 21:21:34 d2.utils.events]:  eta: 0:10:16  iter: 1059  total_loss: 0.4776  loss_cls: 0.08933  loss_box_reg: 0.1601  loss_mask: 0.1555  loss_rpn_cls: 0.01194  loss_rpn_loc: 0.05504    time: 1.4228  last_time: 1.3313  data_time: 0.3684  last_data_time: 0.3238   lr: 0.02  max_mem: 19075M
[03/01 21:22:02 d2.utils.events]:  eta: 0:09:48  iter: 1079  total_loss: 0.4783  loss_cls: 0.0883  loss_box_reg: 0.1656  loss_mask: 0.1561  loss_rpn_cls: 0.01123  loss_rpn_loc: 0.05311    time: 1.4224  last_time: 1.4324  data_time: 0.3641  last_data_time: 0.4016   lr: 0.02  max_mem: 19075M
[03/01 21:22:31 d2.utils.events]:  eta: 0:09:20  iter: 1099  total_loss: 0.4932  loss_cls: 0.08676  loss_box_reg: 0.1749  loss_mask: 0.1596  loss_rpn_cls: 0.01259  loss_rpn_loc: 0.05147    time: 1.4226  last_time: 1.4070  data_time: 0.3800  last_data_time: 0.3662   lr: 0.02  max_mem: 19075M
[03/01 21:22:59 d2.utils.events]:  eta: 0:08:52  iter: 1119  total_loss: 0.466  loss_cls: 0.08166  loss_box_reg: 0.1658  loss_mask: 0.1538  loss_rpn_cls: 0.01071  loss_rpn_loc: 0.05967    time: 1.4226  last_time: 1.5269  data_time: 0.3801  last_data_time: 0.4462   lr: 0.02  max_mem: 19075M
[03/01 21:23:28 d2.utils.events]:  eta: 0:08:25  iter: 1139  total_loss: 0.4555  loss_cls: 0.07996  loss_box_reg: 0.154  loss_mask: 0.1471  loss_rpn_cls: 0.009526  loss_rpn_loc: 0.05436    time: 1.4229  last_time: 1.4160  data_time: 0.3912  last_data_time: 0.3697   lr: 0.02  max_mem: 19075M
[03/01 21:23:57 d2.utils.events]:  eta: 0:07:57  iter: 1159  total_loss: 0.4425  loss_cls: 0.07699  loss_box_reg: 0.1559  loss_mask: 0.1462  loss_rpn_cls: 0.008532  loss_rpn_loc: 0.05095    time: 1.4232  last_time: 1.5060  data_time: 0.3880  last_data_time: 0.4809   lr: 0.02  max_mem: 19075M
[03/01 21:24:26 d2.utils.events]:  eta: 0:07:30  iter: 1179  total_loss: 0.4581  loss_cls: 0.08223  loss_box_reg: 0.1606  loss_mask: 0.1499  loss_rpn_cls: 0.008542  loss_rpn_loc: 0.04625    time: 1.4237  last_time: 1.4378  data_time: 0.3882  last_data_time: 0.3788   lr: 0.02  max_mem: 19075M
[03/01 21:24:55 d2.utils.events]:  eta: 0:07:02  iter: 1199  total_loss: 0.4436  loss_cls: 0.07785  loss_box_reg: 0.1564  loss_mask: 0.148  loss_rpn_cls: 0.009583  loss_rpn_loc: 0.04962    time: 1.4241  last_time: 1.4308  data_time: 0.3994  last_data_time: 0.3946   lr: 0.02  max_mem: 19075M
[03/01 21:25:23 d2.utils.events]:  eta: 0:06:34  iter: 1219  total_loss: 0.4614  loss_cls: 0.08201  loss_box_reg: 0.1543  loss_mask: 0.1523  loss_rpn_cls: 0.009707  loss_rpn_loc: 0.04686    time: 1.4242  last_time: 1.4033  data_time: 0.3776  last_data_time: 0.3505   lr: 0.02  max_mem: 19075M
[03/01 21:25:53 d2.utils.events]:  eta: 0:06:06  iter: 1239  total_loss: 0.4619  loss_cls: 0.08191  loss_box_reg: 0.1647  loss_mask: 0.1477  loss_rpn_cls: 0.01043  loss_rpn_loc: 0.05787    time: 1.4247  last_time: 1.3934  data_time: 0.4076  last_data_time: 0.3730   lr: 0.02  max_mem: 19075M
[03/01 21:26:21 d2.utils.events]:  eta: 0:05:38  iter: 1259  total_loss: 0.4475  loss_cls: 0.07883  loss_box_reg: 0.16  loss_mask: 0.1417  loss_rpn_cls: 0.01208  loss_rpn_loc: 0.05071    time: 1.4247  last_time: 1.4731  data_time: 0.3771  last_data_time: 0.4184   lr: 0.02  max_mem: 19075M
[03/01 21:26:50 d2.utils.events]:  eta: 0:05:10  iter: 1279  total_loss: 0.4526  loss_cls: 0.08085  loss_box_reg: 0.1685  loss_mask: 0.1456  loss_rpn_cls: 0.01028  loss_rpn_loc: 0.05036    time: 1.4253  last_time: 1.3680  data_time: 0.3983  last_data_time: 0.3262   lr: 0.02  max_mem: 19075M
[03/01 21:27:19 d2.utils.events]:  eta: 0:04:43  iter: 1299  total_loss: 0.4966  loss_cls: 0.0857  loss_box_reg: 0.1681  loss_mask: 0.1543  loss_rpn_cls: 0.01218  loss_rpn_loc: 0.06258    time: 1.4256  last_time: 1.4902  data_time: 0.3872  last_data_time: 0.3700   lr: 0.02  max_mem: 19075M
[03/01 21:27:48 d2.utils.events]:  eta: 0:04:14  iter: 1319  total_loss: 0.4496  loss_cls: 0.07795  loss_box_reg: 0.1614  loss_mask: 0.1482  loss_rpn_cls: 0.01012  loss_rpn_loc: 0.05733    time: 1.4259  last_time: 1.4189  data_time: 0.4008  last_data_time: 0.3294   lr: 0.02  max_mem: 19075M
[03/01 21:28:17 d2.utils.events]:  eta: 0:03:46  iter: 1339  total_loss: 0.4639  loss_cls: 0.07788  loss_box_reg: 0.1675  loss_mask: 0.1562  loss_rpn_cls: 0.009979  loss_rpn_loc: 0.04894    time: 1.4261  last_time: 1.4504  data_time: 0.3974  last_data_time: 0.3890   lr: 0.02  max_mem: 19075M
[03/01 21:28:45 d2.utils.events]:  eta: 0:03:18  iter: 1359  total_loss: 0.437  loss_cls: 0.07873  loss_box_reg: 0.1529  loss_mask: 0.1519  loss_rpn_cls: 0.01014  loss_rpn_loc: 0.04701    time: 1.4261  last_time: 1.5057  data_time: 0.3708  last_data_time: 0.4070   lr: 0.02  max_mem: 19075M
[03/01 21:29:14 d2.utils.events]:  eta: 0:02:49  iter: 1379  total_loss: 0.4238  loss_cls: 0.07239  loss_box_reg: 0.1498  loss_mask: 0.1456  loss_rpn_cls: 0.009246  loss_rpn_loc: 0.04567    time: 1.4264  last_time: 1.4073  data_time: 0.3848  last_data_time: 0.3857   lr: 0.02  max_mem: 19075M
[03/01 21:29:43 d2.utils.events]:  eta: 0:02:21  iter: 1399  total_loss: 0.4265  loss_cls: 0.07782  loss_box_reg: 0.1512  loss_mask: 0.1469  loss_rpn_cls: 0.009538  loss_rpn_loc: 0.04843    time: 1.4265  last_time: 1.4501  data_time: 0.3907  last_data_time: 0.4431   lr: 0.02  max_mem: 19075M
[03/01 21:30:12 d2.utils.events]:  eta: 0:01:53  iter: 1419  total_loss: 0.4204  loss_cls: 0.07357  loss_box_reg: 0.151  loss_mask: 0.1433  loss_rpn_cls: 0.008757  loss_rpn_loc: 0.04764    time: 1.4269  last_time: 1.5038  data_time: 0.3815  last_data_time: 0.3832   lr: 0.02  max_mem: 19075M
[03/01 21:30:41 d2.utils.events]:  eta: 0:01:25  iter: 1439  total_loss: 0.4365  loss_cls: 0.07614  loss_box_reg: 0.1544  loss_mask: 0.1459  loss_rpn_cls: 0.00875  loss_rpn_loc: 0.04642    time: 1.4273  last_time: 1.5212  data_time: 0.3874  last_data_time: 0.4064   lr: 0.02  max_mem: 19075M
[03/01 21:31:11 d2.utils.events]:  eta: 0:00:56  iter: 1459  total_loss: 0.4305  loss_cls: 0.07344  loss_box_reg: 0.1574  loss_mask: 0.1393  loss_rpn_cls: 0.008544  loss_rpn_loc: 0.04582    time: 1.4280  last_time: 1.5203  data_time: 0.4092  last_data_time: 0.4721   lr: 0.02  max_mem: 19164M
[03/01 21:31:41 d2.utils.events]:  eta: 0:00:28  iter: 1479  total_loss: 0.434  loss_cls: 0.07931  loss_box_reg: 0.1574  loss_mask: 0.1433  loss_rpn_cls: 0.009377  loss_rpn_loc: 0.04975    time: 1.4288  last_time: 1.7390  data_time: 0.3947  last_data_time: 0.4226   lr: 0.02  max_mem: 19164M
[03/01 21:32:11 d2.utils.events]:  eta: 0:00:00  iter: 1499  total_loss: 0.4107  loss_cls: 0.07222  loss_box_reg: 0.1466  loss_mask: 0.1399  loss_rpn_cls: 0.009639  loss_rpn_loc: 0.04833    time: 1.4291  last_time: 1.3665  data_time: 0.3840  last_data_time: 0.3128   lr: 0.02  max_mem: 19164M
[03/01 21:32:12 d2.engine.hooks]: Overall training speed: 1498 iterations in 0:35:40 (1.4291 s / it)
[03/01 21:32:12 d2.engine.hooks]: Total training time: 0:35:52 (0:00:11 on hooks)
[03/01 21:32:18 d2.data.build]: Distribution of instances among all 11 categories:
|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
| background | 0            |    car     | 8021         | pedestrian | 3347         |
|            | 0            |            | 0            |            | 0            |
|            | 0            |            | 0            |            | 0            |
|            | 0            |   ignore   | 2765         |            |              |
|   total    | 14133        |            |              |            |              |
[03/01 21:32:18 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[03/01 21:32:18 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/01 21:32:18 d2.data.common]: Serializing 2919 elements to byte tensors and concatenating them all ...
[03/01 21:32:18 d2.data.common]: Serialized dataset takes 5.86 MiB
WARNING [03/01 21:32:18 d2.engine.defaults]: No evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
[03/01 21:32:19 d2.checkpoint.detection_checkpoint]: [DetectionCheckpointer] Loading from /ghome/group07/C5-W2/lr_0_02_bs_32_is_18/model_0001499.pth ...
[03/01 21:32:20 d2.evaluation.coco_evaluation]: Trying to convert 'KITTI-MOTS_val' to COCO format ...
[03/01 21:32:20 d2.data.datasets.coco]: Converting annotations of dataset 'KITTI-MOTS_val' to COCO format ...)
[03/01 21:32:22 d2.data.datasets.coco]: Converting dataset dicts into COCO format
[03/01 21:32:22 d2.data.datasets.coco]: Conversion finished, #images: 2919, #annotations: 14133
[03/01 21:32:22 d2.data.datasets.coco]: Caching COCO format annotations at '/ghome/group07/C5-W2/lr_0_02_bs_32_is_18/KITTI-MOTS_val_coco_format.json' ...
[03/01 21:32:25 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[03/01 21:32:25 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/01 21:32:25 d2.data.common]: Serializing 2919 elements to byte tensors and concatenating them all ...
[03/01 21:32:25 d2.data.common]: Serialized dataset takes 5.86 MiB
[03/01 21:32:25 d2.evaluation.evaluator]: Start inference on 2919 batches
[03/01 21:32:28 d2.evaluation.evaluator]: Inference done 11/2919. Dataloading: 0.0021 s/iter. Inference: 0.0612 s/iter. Eval: 0.0017 s/iter. Total: 0.0650 s/iter. ETA=0:03:08
[03/01 21:32:33 d2.evaluation.evaluator]: Inference done 97/2919. Dataloading: 0.0028 s/iter. Inference: 0.0537 s/iter. Eval: 0.0025 s/iter. Total: 0.0591 s/iter. ETA=0:02:46
[03/01 21:32:38 d2.evaluation.evaluator]: Inference done 185/2919. Dataloading: 0.0027 s/iter. Inference: 0.0531 s/iter. Eval: 0.0022 s/iter. Total: 0.0581 s/iter. ETA=0:02:38
[03/01 21:32:43 d2.evaluation.evaluator]: Inference done 272/2919. Dataloading: 0.0026 s/iter. Inference: 0.0533 s/iter. Eval: 0.0021 s/iter. Total: 0.0581 s/iter. ETA=0:02:33
[03/01 21:32:48 d2.evaluation.evaluator]: Inference done 360/2919. Dataloading: 0.0026 s/iter. Inference: 0.0530 s/iter. Eval: 0.0021 s/iter. Total: 0.0578 s/iter. ETA=0:02:27
[03/01 21:32:53 d2.evaluation.evaluator]: Inference done 450/2919. Dataloading: 0.0026 s/iter. Inference: 0.0526 s/iter. Eval: 0.0021 s/iter. Total: 0.0574 s/iter. ETA=0:02:21
[03/01 21:32:58 d2.evaluation.evaluator]: Inference done 543/2919. Dataloading: 0.0026 s/iter. Inference: 0.0522 s/iter. Eval: 0.0020 s/iter. Total: 0.0569 s/iter. ETA=0:02:15
[03/01 21:33:03 d2.evaluation.evaluator]: Inference done 634/2919. Dataloading: 0.0026 s/iter. Inference: 0.0520 s/iter. Eval: 0.0020 s/iter. Total: 0.0566 s/iter. ETA=0:02:09
[03/01 21:33:08 d2.evaluation.evaluator]: Inference done 721/2919. Dataloading: 0.0026 s/iter. Inference: 0.0519 s/iter. Eval: 0.0022 s/iter. Total: 0.0568 s/iter. ETA=0:02:04
[03/01 21:33:13 d2.evaluation.evaluator]: Inference done 812/2919. Dataloading: 0.0026 s/iter. Inference: 0.0517 s/iter. Eval: 0.0022 s/iter. Total: 0.0566 s/iter. ETA=0:01:59
[03/01 21:33:18 d2.evaluation.evaluator]: Inference done 899/2919. Dataloading: 0.0026 s/iter. Inference: 0.0518 s/iter. Eval: 0.0023 s/iter. Total: 0.0568 s/iter. ETA=0:01:54
[03/01 21:33:23 d2.evaluation.evaluator]: Inference done 992/2919. Dataloading: 0.0026 s/iter. Inference: 0.0516 s/iter. Eval: 0.0023 s/iter. Total: 0.0565 s/iter. ETA=0:01:48
[03/01 21:33:28 d2.evaluation.evaluator]: Inference done 1080/2919. Dataloading: 0.0026 s/iter. Inference: 0.0515 s/iter. Eval: 0.0024 s/iter. Total: 0.0566 s/iter. ETA=0:01:44
[03/01 21:33:33 d2.evaluation.evaluator]: Inference done 1167/2919. Dataloading: 0.0026 s/iter. Inference: 0.0516 s/iter. Eval: 0.0024 s/iter. Total: 0.0566 s/iter. ETA=0:01:39
[03/01 21:33:38 d2.evaluation.evaluator]: Inference done 1254/2919. Dataloading: 0.0026 s/iter. Inference: 0.0517 s/iter. Eval: 0.0024 s/iter. Total: 0.0567 s/iter. ETA=0:01:34
[03/01 21:33:43 d2.evaluation.evaluator]: Inference done 1345/2919. Dataloading: 0.0026 s/iter. Inference: 0.0516 s/iter. Eval: 0.0024 s/iter. Total: 0.0566 s/iter. ETA=0:01:29
[03/01 21:33:48 d2.evaluation.evaluator]: Inference done 1439/2919. Dataloading: 0.0026 s/iter. Inference: 0.0514 s/iter. Eval: 0.0024 s/iter. Total: 0.0564 s/iter. ETA=0:01:23
[03/01 21:33:53 d2.evaluation.evaluator]: Inference done 1532/2919. Dataloading: 0.0026 s/iter. Inference: 0.0512 s/iter. Eval: 0.0024 s/iter. Total: 0.0562 s/iter. ETA=0:01:18
[03/01 21:33:58 d2.evaluation.evaluator]: Inference done 1621/2919. Dataloading: 0.0025 s/iter. Inference: 0.0512 s/iter. Eval: 0.0024 s/iter. Total: 0.0563 s/iter. ETA=0:01:13
[03/01 21:34:03 d2.evaluation.evaluator]: Inference done 1708/2919. Dataloading: 0.0026 s/iter. Inference: 0.0513 s/iter. Eval: 0.0024 s/iter. Total: 0.0563 s/iter. ETA=0:01:08
[03/01 21:34:08 d2.evaluation.evaluator]: Inference done 1783/2919. Dataloading: 0.0026 s/iter. Inference: 0.0517 s/iter. Eval: 0.0024 s/iter. Total: 0.0568 s/iter. ETA=0:01:04
[03/01 21:34:13 d2.evaluation.evaluator]: Inference done 1871/2919. Dataloading: 0.0026 s/iter. Inference: 0.0517 s/iter. Eval: 0.0025 s/iter. Total: 0.0568 s/iter. ETA=0:00:59
[03/01 21:34:18 d2.evaluation.evaluator]: Inference done 1960/2919. Dataloading: 0.0026 s/iter. Inference: 0.0517 s/iter. Eval: 0.0025 s/iter. Total: 0.0568 s/iter. ETA=0:00:54
[03/01 21:34:23 d2.evaluation.evaluator]: Inference done 2044/2919. Dataloading: 0.0026 s/iter. Inference: 0.0517 s/iter. Eval: 0.0026 s/iter. Total: 0.0569 s/iter. ETA=0:00:49
[03/01 21:34:28 d2.evaluation.evaluator]: Inference done 2130/2919. Dataloading: 0.0026 s/iter. Inference: 0.0518 s/iter. Eval: 0.0026 s/iter. Total: 0.0570 s/iter. ETA=0:00:44
[03/01 21:34:33 d2.evaluation.evaluator]: Inference done 2222/2919. Dataloading: 0.0026 s/iter. Inference: 0.0517 s/iter. Eval: 0.0026 s/iter. Total: 0.0569 s/iter. ETA=0:00:39
[03/01 21:34:38 d2.evaluation.evaluator]: Inference done 2309/2919. Dataloading: 0.0026 s/iter. Inference: 0.0517 s/iter. Eval: 0.0026 s/iter. Total: 0.0569 s/iter. ETA=0:00:34
[03/01 21:34:43 d2.evaluation.evaluator]: Inference done 2393/2919. Dataloading: 0.0026 s/iter. Inference: 0.0517 s/iter. Eval: 0.0027 s/iter. Total: 0.0570 s/iter. ETA=0:00:29
[03/01 21:34:48 d2.evaluation.evaluator]: Inference done 2472/2919. Dataloading: 0.0026 s/iter. Inference: 0.0517 s/iter. Eval: 0.0029 s/iter. Total: 0.0572 s/iter. ETA=0:00:25
[03/01 21:34:53 d2.evaluation.evaluator]: Inference done 2552/2919. Dataloading: 0.0026 s/iter. Inference: 0.0518 s/iter. Eval: 0.0030 s/iter. Total: 0.0574 s/iter. ETA=0:00:21
[03/01 21:34:58 d2.evaluation.evaluator]: Inference done 2633/2919. Dataloading: 0.0026 s/iter. Inference: 0.0519 s/iter. Eval: 0.0030 s/iter. Total: 0.0576 s/iter. ETA=0:00:16
[03/01 21:35:04 d2.evaluation.evaluator]: Inference done 2718/2919. Dataloading: 0.0026 s/iter. Inference: 0.0519 s/iter. Eval: 0.0030 s/iter. Total: 0.0576 s/iter. ETA=0:00:11
[03/01 21:35:09 d2.evaluation.evaluator]: Inference done 2800/2919. Dataloading: 0.0026 s/iter. Inference: 0.0520 s/iter. Eval: 0.0031 s/iter. Total: 0.0577 s/iter. ETA=0:00:06
[03/01 21:35:14 d2.evaluation.evaluator]: Inference done 2884/2919. Dataloading: 0.0026 s/iter. Inference: 0.0520 s/iter. Eval: 0.0031 s/iter. Total: 0.0578 s/iter. ETA=0:00:02
[03/01 21:35:16 d2.evaluation.evaluator]: Total inference time: 0:02:48.527019 (0.057834 s / iter per device, on 1 devices)
[03/01 21:35:16 d2.evaluation.evaluator]: Total inference pure compute time: 0:02:31 (0.052007 s / iter per device, on 1 devices)
[03/01 21:35:16 d2.evaluation.coco_evaluation]: Preparing results for COCO format ...
[03/01 21:35:16 d2.evaluation.coco_evaluation]: Saving results to /ghome/group07/C5-W2/lr_0_02_bs_32_is_18/coco_instances_results.json
[03/01 21:35:16 d2.evaluation.coco_evaluation]: Evaluating predictions with unofficial COCO API...
Loading and preparing results...
DONE (t=0.01s)
creating index...
index created!
[03/01 21:35:16 d2.evaluation.fast_eval_api]: Evaluate annotation type *bbox*
[03/01 21:35:17 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 0.78 seconds.
[03/01 21:35:17 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[03/01 21:35:17 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.08 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.413
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.587
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.476
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.269
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.482
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.546
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.164
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.467
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.471
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.309
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.532
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.667
[03/01 21:35:17 d2.evaluation.coco_evaluation]: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 41.267 | 58.724 | 47.638 | 26.900 | 48.213 | 54.623 |
[03/01 21:35:17 d2.evaluation.coco_evaluation]: Per-category bbox AP: 
| category   | AP   | category   | AP     | category   | AP     |
|:-----------|:-----|:-----------|:-------|:-----------|:-------|
| background | nan  | car        | 67.030 | pedestrian | 51.348 |
|            | nan  |            | nan    |            | nan    |
|            | nan  |            | nan    |            | nan    |
|            | nan  | ignore     | 5.423  |            |        |
Loading and preparing results...
DONE (t=0.12s)
creating index...
index created!
[03/01 21:35:17 d2.evaluation.fast_eval_api]: Evaluate annotation type *segm*
[03/01 21:35:18 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 0.90 seconds.
[03/01 21:35:18 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[03/01 21:35:18 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.07 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.376
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.553
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.425
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.220
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.445
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.560
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.149
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.427
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.429
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.274
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.484
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.608
[03/01 21:35:18 d2.evaluation.coco_evaluation]: Evaluation results for segm: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 37.615 | 55.290 | 42.506 | 21.984 | 44.543 | 56.026 |
[03/01 21:35:18 d2.evaluation.coco_evaluation]: Per-category segm AP: 
| category   | AP   | category   | AP     | category   | AP     |
|:-----------|:-----|:-----------|:-------|:-----------|:-------|
| background | nan  | car        | 67.595 | pedestrian | 41.039 |
|            | nan  |            | nan    |            | nan    |
|            | nan  |            | nan    |            | nan    |
|            | nan  | ignore     | 4.211  |            |        |
OrderedDict([('bbox', {'AP': 41.266997769548205, 'AP50': 58.72426895751879, 'AP75': 47.63849865540033, 'APs': 26.899702103635764, 'APm': 48.213147647640376, 'APl': 54.62253250820099, 'AP-background': nan, 'AP-car': 67.03012961373483, 'AP-pedestrian': 51.34800464723466, 'AP-': nan, 'AP-ignore': 5.422859047675104}), ('segm', {'AP': 37.614748988226296, 'AP50': 55.28989101022488, 'AP75': 42.5059505291456, 'APs': 21.984443244122943, 'APm': 44.542626543067705, 'APl': 56.02647897044294, 'AP-background': nan, 'AP-car': 67.59486921436408, 'AP-pedestrian': 41.03886166411257, 'AP-': nan, 'AP-ignore': 4.210516086202234})])
