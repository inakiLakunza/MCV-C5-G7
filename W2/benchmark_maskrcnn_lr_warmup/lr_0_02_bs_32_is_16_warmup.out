1
The device we will be working on is: cuda
[03/02 08:57:58 d2.engine.defaults]: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=12, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=44, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 11, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[03/02 08:58:02 d2.data.build]: Removed 0 images with no usable annotations. 5007 images left.
[03/02 08:58:02 d2.data.build]: Distribution of instances among all 11 categories:
|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
| background | 0            |    car     | 18822        | pedestrian | 8065         |
|            | 0            |            | 0            |            | 0            |
|            | 0            |            | 0            |            | 0            |
|            | 0            |   ignore   | 4977         |            |              |
|   total    | 31864        |            |              |            |              |
[03/02 08:58:02 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[03/02 08:58:02 d2.data.build]: Using training sampler TrainingSampler
[03/02 08:58:02 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/02 08:58:02 d2.data.common]: Serializing 5007 elements to byte tensors and concatenating them all ...
[03/02 08:58:02 d2.data.common]: Serialized dataset takes 13.56 MiB
[03/02 08:58:02 d2.data.build]: Making batched data loader with batch_size=16
WARNING [03/02 08:58:02 d2.solver.build]: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[03/02 08:58:02 d2.checkpoint.detection_checkpoint]: [DetectionCheckpointer] Loading from https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl ...
[03/02 08:58:02 d2.engine.train_loop]: Starting training from iteration 0
[03/02 08:58:36 d2.utils.events]:  eta: 0:30:16  iter: 19  total_loss: 2.709  loss_cls: 1.43  loss_box_reg: 0.4427  loss_mask: 0.632  loss_rpn_cls: 0.121  loss_rpn_loc: 0.08609    time: 1.2936  last_time: 1.2079  data_time: 0.6207  last_data_time: 0.3248   lr: 0.00079848  max_mem: 15621M
[03/02 08:59:11 d2.utils.events]:  eta: 0:30:22  iter: 39  total_loss: 1.353  loss_cls: 0.409  loss_box_reg: 0.4197  loss_mask: 0.3651  loss_rpn_cls: 0.05703  loss_rpn_loc: 0.08752    time: 1.3029  last_time: 1.2493  data_time: 0.3834  last_data_time: 0.2845   lr: 0.0015969  max_mem: 15874M
[03/02 08:59:39 d2.utils.events]:  eta: 0:29:57  iter: 59  total_loss: 0.9508  loss_cls: 0.2415  loss_box_reg: 0.2935  loss_mask: 0.271  loss_rpn_cls: 0.03467  loss_rpn_loc: 0.07495    time: 1.3281  last_time: 1.2200  data_time: 0.3794  last_data_time: 0.3296   lr: 0.0023953  max_mem: 15874M
[03/02 09:00:03 d2.utils.events]:  eta: 0:29:21  iter: 79  total_loss: 0.8265  loss_cls: 0.18  loss_box_reg: 0.2594  loss_mask: 0.2568  loss_rpn_cls: 0.03669  loss_rpn_loc: 0.06891    time: 1.3032  last_time: 1.1584  data_time: 0.3296  last_data_time: 0.2578   lr: 0.0031937  max_mem: 15874M
[03/02 09:00:29 d2.utils.events]:  eta: 0:29:01  iter: 99  total_loss: 0.7918  loss_cls: 0.165  loss_box_reg: 0.2438  loss_mask: 0.2463  loss_rpn_cls: 0.04226  loss_rpn_loc: 0.07688    time: 1.2966  last_time: 1.2558  data_time: 0.3612  last_data_time: 0.3333   lr: 0.0039921  max_mem: 15874M
[03/02 09:00:54 d2.utils.events]:  eta: 0:28:39  iter: 119  total_loss: 0.6797  loss_cls: 0.1452  loss_box_reg: 0.2079  loss_mask: 0.2349  loss_rpn_cls: 0.02873  loss_rpn_loc: 0.07618    time: 1.2891  last_time: 1.2022  data_time: 0.3429  last_data_time: 0.3083   lr: 0.0047905  max_mem: 15874M
[03/02 09:01:19 d2.utils.events]:  eta: 0:28:13  iter: 139  total_loss: 0.6989  loss_cls: 0.1506  loss_box_reg: 0.2185  loss_mask: 0.2244  loss_rpn_cls: 0.02759  loss_rpn_loc: 0.07857    time: 1.2839  last_time: 1.1895  data_time: 0.3300  last_data_time: 0.2849   lr: 0.0055889  max_mem: 15874M
[03/02 09:01:43 d2.utils.events]:  eta: 0:27:38  iter: 159  total_loss: 0.6581  loss_cls: 0.1306  loss_box_reg: 0.1938  loss_mask: 0.2283  loss_rpn_cls: 0.02719  loss_rpn_loc: 0.06879    time: 1.2738  last_time: 1.2318  data_time: 0.3034  last_data_time: 0.3352   lr: 0.0063873  max_mem: 15874M
[03/02 09:02:08 d2.utils.events]:  eta: 0:27:12  iter: 179  total_loss: 0.6553  loss_cls: 0.1372  loss_box_reg: 0.1981  loss_mask: 0.2196  loss_rpn_cls: 0.02913  loss_rpn_loc: 0.0725    time: 1.2692  last_time: 1.2321  data_time: 0.3235  last_data_time: 0.3366   lr: 0.0071857  max_mem: 15874M
[03/02 09:02:32 d2.utils.events]:  eta: 0:26:44  iter: 199  total_loss: 0.6462  loss_cls: 0.1235  loss_box_reg: 0.1999  loss_mask: 0.2231  loss_rpn_cls: 0.02465  loss_rpn_loc: 0.06746    time: 1.2657  last_time: 1.2334  data_time: 0.3337  last_data_time: 0.3035   lr: 0.0079841  max_mem: 15874M
[03/02 09:02:57 d2.utils.events]:  eta: 0:26:18  iter: 219  total_loss: 0.6092  loss_cls: 0.1271  loss_box_reg: 0.1784  loss_mask: 0.2028  loss_rpn_cls: 0.02318  loss_rpn_loc: 0.06614    time: 1.2612  last_time: 1.2078  data_time: 0.3124  last_data_time: 0.3068   lr: 0.0087825  max_mem: 15874M
[03/02 09:03:22 d2.utils.events]:  eta: 0:25:56  iter: 239  total_loss: 0.6502  loss_cls: 0.1386  loss_box_reg: 0.2116  loss_mask: 0.2084  loss_rpn_cls: 0.02306  loss_rpn_loc: 0.06275    time: 1.2620  last_time: 1.2208  data_time: 0.3369  last_data_time: 0.3068   lr: 0.0095809  max_mem: 16029M
[03/02 09:03:47 d2.utils.events]:  eta: 0:25:32  iter: 259  total_loss: 0.6048  loss_cls: 0.1299  loss_box_reg: 0.1902  loss_mask: 0.2008  loss_rpn_cls: 0.02494  loss_rpn_loc: 0.06608    time: 1.2601  last_time: 1.2930  data_time: 0.3234  last_data_time: 0.3207   lr: 0.010379  max_mem: 16299M
[03/02 09:04:12 d2.utils.events]:  eta: 0:25:09  iter: 279  total_loss: 0.6016  loss_cls: 0.125  loss_box_reg: 0.2013  loss_mask: 0.2026  loss_rpn_cls: 0.02479  loss_rpn_loc: 0.06955    time: 1.2595  last_time: 1.1778  data_time: 0.3301  last_data_time: 0.2950   lr: 0.011178  max_mem: 16299M
[03/02 09:04:37 d2.utils.events]:  eta: 0:24:46  iter: 299  total_loss: 0.6441  loss_cls: 0.1265  loss_box_reg: 0.2081  loss_mask: 0.2005  loss_rpn_cls: 0.02024  loss_rpn_loc: 0.06795    time: 1.2602  last_time: 1.2519  data_time: 0.3387  last_data_time: 0.3131   lr: 0.011976  max_mem: 16299M
[03/02 09:05:02 d2.utils.events]:  eta: 0:24:21  iter: 319  total_loss: 0.6034  loss_cls: 0.1208  loss_box_reg: 0.198  loss_mask: 0.194  loss_rpn_cls: 0.02537  loss_rpn_loc: 0.06772    time: 1.2586  last_time: 1.2830  data_time: 0.3198  last_data_time: 0.3497   lr: 0.012774  max_mem: 16299M
[03/02 09:05:28 d2.utils.events]:  eta: 0:23:59  iter: 339  total_loss: 0.5894  loss_cls: 0.119  loss_box_reg: 0.1922  loss_mask: 0.1922  loss_rpn_cls: 0.01927  loss_rpn_loc: 0.0626    time: 1.2598  last_time: 1.3146  data_time: 0.3371  last_data_time: 0.3397   lr: 0.013573  max_mem: 16299M
[03/02 09:05:53 d2.utils.events]:  eta: 0:23:35  iter: 359  total_loss: 0.5841  loss_cls: 0.1238  loss_box_reg: 0.1875  loss_mask: 0.1835  loss_rpn_cls: 0.02043  loss_rpn_loc: 0.06083    time: 1.2588  last_time: 1.2659  data_time: 0.3164  last_data_time: 0.3232   lr: 0.014371  max_mem: 16299M
[03/02 09:06:18 d2.utils.events]:  eta: 0:23:11  iter: 379  total_loss: 0.5861  loss_cls: 0.1204  loss_box_reg: 0.1978  loss_mask: 0.1857  loss_rpn_cls: 0.01963  loss_rpn_loc: 0.06833    time: 1.2587  last_time: 1.2073  data_time: 0.3185  last_data_time: 0.2824   lr: 0.01517  max_mem: 16370M
[03/02 09:06:43 d2.utils.events]:  eta: 0:22:48  iter: 399  total_loss: 0.5912  loss_cls: 0.1159  loss_box_reg: 0.1912  loss_mask: 0.1916  loss_rpn_cls: 0.02128  loss_rpn_loc: 0.06078    time: 1.2583  last_time: 1.2614  data_time: 0.3208  last_data_time: 0.3230   lr: 0.015968  max_mem: 16370M
[03/02 09:07:08 d2.utils.events]:  eta: 0:22:24  iter: 419  total_loss: 0.5732  loss_cls: 0.1102  loss_box_reg: 0.1948  loss_mask: 0.1828  loss_rpn_cls: 0.02094  loss_rpn_loc: 0.06752    time: 1.2589  last_time: 1.2266  data_time: 0.3333  last_data_time: 0.2846   lr: 0.016766  max_mem: 16370M
[03/02 09:07:34 d2.utils.events]:  eta: 0:22:00  iter: 439  total_loss: 0.5537  loss_cls: 0.1108  loss_box_reg: 0.1951  loss_mask: 0.1812  loss_rpn_cls: 0.0181  loss_rpn_loc: 0.05732    time: 1.2604  last_time: 1.2565  data_time: 0.3388  last_data_time: 0.3048   lr: 0.017565  max_mem: 16370M
[03/02 09:07:59 d2.utils.events]:  eta: 0:21:36  iter: 459  total_loss: 0.5813  loss_cls: 0.1122  loss_box_reg: 0.1877  loss_mask: 0.1821  loss_rpn_cls: 0.02148  loss_rpn_loc: 0.06407    time: 1.2600  last_time: 1.2599  data_time: 0.3127  last_data_time: 0.3114   lr: 0.018363  max_mem: 16370M
[03/02 09:08:24 d2.utils.events]:  eta: 0:21:11  iter: 479  total_loss: 0.5552  loss_cls: 0.1138  loss_box_reg: 0.1868  loss_mask: 0.1823  loss_rpn_cls: 0.01766  loss_rpn_loc: 0.05901    time: 1.2597  last_time: 1.2419  data_time: 0.3059  last_data_time: 0.2928   lr: 0.019162  max_mem: 16370M
[03/02 09:08:50 d2.utils.events]:  eta: 0:20:46  iter: 499  total_loss: 0.5676  loss_cls: 0.1021  loss_box_reg: 0.1927  loss_mask: 0.1817  loss_rpn_cls: 0.01591  loss_rpn_loc: 0.05854    time: 1.2593  last_time: 1.2142  data_time: 0.3213  last_data_time: 0.2921   lr: 0.01996  max_mem: 16370M
[03/02 09:09:15 d2.utils.events]:  eta: 0:20:21  iter: 519  total_loss: 0.5628  loss_cls: 0.1045  loss_box_reg: 0.1895  loss_mask: 0.1721  loss_rpn_cls: 0.01642  loss_rpn_loc: 0.05744    time: 1.2596  last_time: 1.2131  data_time: 0.3305  last_data_time: 0.2840   lr: 0.02  max_mem: 17058M
[03/02 09:09:41 d2.utils.events]:  eta: 0:19:56  iter: 539  total_loss: 0.5669  loss_cls: 0.1113  loss_box_reg: 0.185  loss_mask: 0.1738  loss_rpn_cls: 0.0183  loss_rpn_loc: 0.05953    time: 1.2597  last_time: 1.2326  data_time: 0.3203  last_data_time: 0.3162   lr: 0.02  max_mem: 17058M
[03/02 09:10:06 d2.utils.events]:  eta: 0:19:33  iter: 559  total_loss: 0.5384  loss_cls: 0.1067  loss_box_reg: 0.1861  loss_mask: 0.173  loss_rpn_cls: 0.0171  loss_rpn_loc: 0.05844    time: 1.2605  last_time: 1.2528  data_time: 0.3337  last_data_time: 0.3247   lr: 0.02  max_mem: 17058M
[03/02 09:10:31 d2.utils.events]:  eta: 0:19:08  iter: 579  total_loss: 0.5529  loss_cls: 0.1068  loss_box_reg: 0.1806  loss_mask: 0.1695  loss_rpn_cls: 0.01918  loss_rpn_loc: 0.06393    time: 1.2601  last_time: 1.1395  data_time: 0.3276  last_data_time: 0.2705   lr: 0.02  max_mem: 17058M
[03/02 09:10:57 d2.utils.events]:  eta: 0:18:44  iter: 599  total_loss: 0.5537  loss_cls: 0.1037  loss_box_reg: 0.1784  loss_mask: 0.1691  loss_rpn_cls: 0.01795  loss_rpn_loc: 0.06577    time: 1.2611  last_time: 1.2556  data_time: 0.3380  last_data_time: 0.3364   lr: 0.02  max_mem: 17058M
[03/02 09:11:22 d2.utils.events]:  eta: 0:18:19  iter: 619  total_loss: 0.5647  loss_cls: 0.1009  loss_box_reg: 0.1872  loss_mask: 0.1798  loss_rpn_cls: 0.01689  loss_rpn_loc: 0.0621    time: 1.2611  last_time: 1.3163  data_time: 0.3222  last_data_time: 0.3571   lr: 0.02  max_mem: 17058M
[03/02 09:11:47 d2.utils.events]:  eta: 0:17:54  iter: 639  total_loss: 0.5278  loss_cls: 0.09642  loss_box_reg: 0.1722  loss_mask: 0.1732  loss_rpn_cls: 0.0167  loss_rpn_loc: 0.06341    time: 1.2609  last_time: 1.2089  data_time: 0.3310  last_data_time: 0.2905   lr: 0.02  max_mem: 17058M
[03/02 09:12:13 d2.utils.events]:  eta: 0:17:29  iter: 659  total_loss: 0.5211  loss_cls: 0.09992  loss_box_reg: 0.1809  loss_mask: 0.1689  loss_rpn_cls: 0.01391  loss_rpn_loc: 0.05632    time: 1.2612  last_time: 1.2668  data_time: 0.3319  last_data_time: 0.3211   lr: 0.02  max_mem: 17058M
[03/02 09:12:38 d2.utils.events]:  eta: 0:17:04  iter: 679  total_loss: 0.4955  loss_cls: 0.08712  loss_box_reg: 0.1701  loss_mask: 0.1685  loss_rpn_cls: 0.01375  loss_rpn_loc: 0.05943    time: 1.2614  last_time: 1.3379  data_time: 0.3117  last_data_time: 0.3865   lr: 0.02  max_mem: 17058M
[03/02 09:13:03 d2.utils.events]:  eta: 0:16:40  iter: 699  total_loss: 0.4822  loss_cls: 0.08435  loss_box_reg: 0.1615  loss_mask: 0.1574  loss_rpn_cls: 0.01211  loss_rpn_loc: 0.05523    time: 1.2612  last_time: 1.1964  data_time: 0.3187  last_data_time: 0.2988   lr: 0.02  max_mem: 17058M
[03/02 09:13:28 d2.utils.events]:  eta: 0:16:15  iter: 719  total_loss: 0.466  loss_cls: 0.08262  loss_box_reg: 0.1622  loss_mask: 0.1552  loss_rpn_cls: 0.01245  loss_rpn_loc: 0.05386    time: 1.2609  last_time: 1.3577  data_time: 0.3158  last_data_time: 0.4352   lr: 0.02  max_mem: 17058M
[03/02 09:13:53 d2.utils.events]:  eta: 0:15:49  iter: 739  total_loss: 0.4746  loss_cls: 0.08383  loss_box_reg: 0.1618  loss_mask: 0.1602  loss_rpn_cls: 0.01216  loss_rpn_loc: 0.05741    time: 1.2604  last_time: 1.3012  data_time: 0.3089  last_data_time: 0.3599   lr: 0.02  max_mem: 17058M
[03/02 09:14:19 d2.utils.events]:  eta: 0:15:25  iter: 759  total_loss: 0.5025  loss_cls: 0.09306  loss_box_reg: 0.1743  loss_mask: 0.167  loss_rpn_cls: 0.01131  loss_rpn_loc: 0.0617    time: 1.2615  last_time: 1.3501  data_time: 0.3511  last_data_time: 0.3485   lr: 0.02  max_mem: 17058M
[03/02 09:14:45 d2.utils.events]:  eta: 0:15:01  iter: 779  total_loss: 0.4858  loss_cls: 0.08852  loss_box_reg: 0.1701  loss_mask: 0.1546  loss_rpn_cls: 0.01211  loss_rpn_loc: 0.06354    time: 1.2623  last_time: 1.2980  data_time: 0.3320  last_data_time: 0.3484   lr: 0.02  max_mem: 17058M
[03/02 09:15:11 d2.utils.events]:  eta: 0:14:37  iter: 799  total_loss: 0.5026  loss_cls: 0.08974  loss_box_reg: 0.1714  loss_mask: 0.1633  loss_rpn_cls: 0.01215  loss_rpn_loc: 0.05616    time: 1.2630  last_time: 1.2258  data_time: 0.3416  last_data_time: 0.3115   lr: 0.02  max_mem: 17058M
[03/02 09:15:36 d2.utils.events]:  eta: 0:14:12  iter: 819  total_loss: 0.4933  loss_cls: 0.08963  loss_box_reg: 0.1658  loss_mask: 0.1571  loss_rpn_cls: 0.0154  loss_rpn_loc: 0.05929    time: 1.2632  last_time: 1.2466  data_time: 0.3116  last_data_time: 0.3020   lr: 0.02  max_mem: 17058M
[03/02 09:16:03 d2.utils.events]:  eta: 0:13:48  iter: 839  total_loss: 0.5191  loss_cls: 0.09571  loss_box_reg: 0.1883  loss_mask: 0.1607  loss_rpn_cls: 0.01527  loss_rpn_loc: 0.06136    time: 1.2650  last_time: 1.3411  data_time: 0.3549  last_data_time: 0.3497   lr: 0.02  max_mem: 17058M
[03/02 09:16:29 d2.utils.events]:  eta: 0:13:23  iter: 859  total_loss: 0.485  loss_cls: 0.08667  loss_box_reg: 0.1681  loss_mask: 0.1595  loss_rpn_cls: 0.01113  loss_rpn_loc: 0.05271    time: 1.2653  last_time: 1.3134  data_time: 0.3184  last_data_time: 0.3247   lr: 0.02  max_mem: 17058M
[03/02 09:16:54 d2.utils.events]:  eta: 0:12:58  iter: 879  total_loss: 0.4716  loss_cls: 0.08793  loss_box_reg: 0.1691  loss_mask: 0.1595  loss_rpn_cls: 0.01095  loss_rpn_loc: 0.05277    time: 1.2653  last_time: 1.2432  data_time: 0.3129  last_data_time: 0.3127   lr: 0.02  max_mem: 17058M
[03/02 09:17:20 d2.utils.events]:  eta: 0:12:33  iter: 899  total_loss: 0.4978  loss_cls: 0.09008  loss_box_reg: 0.1782  loss_mask: 0.1568  loss_rpn_cls: 0.01226  loss_rpn_loc: 0.05284    time: 1.2656  last_time: 1.2765  data_time: 0.3176  last_data_time: 0.3179   lr: 0.02  max_mem: 17058M
[03/02 09:17:46 d2.utils.events]:  eta: 0:12:08  iter: 919  total_loss: 0.483  loss_cls: 0.08943  loss_box_reg: 0.1685  loss_mask: 0.1556  loss_rpn_cls: 0.01252  loss_rpn_loc: 0.0606    time: 1.2669  last_time: 1.2237  data_time: 0.3517  last_data_time: 0.2722   lr: 0.02  max_mem: 17122M
[03/02 09:18:12 d2.utils.events]:  eta: 0:11:44  iter: 939  total_loss: 0.4738  loss_cls: 0.08684  loss_box_reg: 0.1642  loss_mask: 0.1527  loss_rpn_cls: 0.01106  loss_rpn_loc: 0.04998    time: 1.2674  last_time: 1.2973  data_time: 0.3243  last_data_time: 0.3214   lr: 0.02  max_mem: 17122M
[03/02 09:18:38 d2.utils.events]:  eta: 0:11:19  iter: 959  total_loss: 0.4456  loss_cls: 0.08436  loss_box_reg: 0.1555  loss_mask: 0.1457  loss_rpn_cls: 0.009323  loss_rpn_loc: 0.04167    time: 1.2681  last_time: 1.2627  data_time: 0.3312  last_data_time: 0.2768   lr: 0.02  max_mem: 17122M
[03/02 09:19:04 d2.utils.events]:  eta: 0:10:54  iter: 979  total_loss: 0.4579  loss_cls: 0.07973  loss_box_reg: 0.1655  loss_mask: 0.1453  loss_rpn_cls: 0.009806  loss_rpn_loc: 0.05113    time: 1.2687  last_time: 1.3264  data_time: 0.3189  last_data_time: 0.3047   lr: 0.02  max_mem: 17122M
[03/02 09:19:31 d2.utils.events]:  eta: 0:10:30  iter: 999  total_loss: 0.4437  loss_cls: 0.08129  loss_box_reg: 0.1537  loss_mask: 0.1515  loss_rpn_cls: 0.00925  loss_rpn_loc: 0.05093    time: 1.2694  last_time: 1.2138  data_time: 0.3383  last_data_time: 0.2751   lr: 0.02  max_mem: 17122M
[03/02 09:19:57 d2.utils.events]:  eta: 0:10:04  iter: 1019  total_loss: 0.4594  loss_cls: 0.08365  loss_box_reg: 0.1634  loss_mask: 0.1449  loss_rpn_cls: 0.01026  loss_rpn_loc: 0.05719    time: 1.2697  last_time: 1.2703  data_time: 0.3197  last_data_time: 0.2800   lr: 0.02  max_mem: 17122M
[03/02 09:20:23 d2.utils.events]:  eta: 0:09:39  iter: 1039  total_loss: 0.4523  loss_cls: 0.08163  loss_box_reg: 0.1496  loss_mask: 0.1475  loss_rpn_cls: 0.01195  loss_rpn_loc: 0.05435    time: 1.2704  last_time: 1.2509  data_time: 0.3335  last_data_time: 0.3069   lr: 0.02  max_mem: 17122M
[03/02 09:20:49 d2.utils.events]:  eta: 0:09:14  iter: 1059  total_loss: 0.4516  loss_cls: 0.08334  loss_box_reg: 0.1569  loss_mask: 0.1463  loss_rpn_cls: 0.01058  loss_rpn_loc: 0.05497    time: 1.2710  last_time: 1.3121  data_time: 0.3311  last_data_time: 0.3190   lr: 0.02  max_mem: 17122M
[03/02 09:21:14 d2.utils.events]:  eta: 0:08:50  iter: 1079  total_loss: 0.4616  loss_cls: 0.0822  loss_box_reg: 0.1646  loss_mask: 0.1542  loss_rpn_cls: 0.01035  loss_rpn_loc: 0.04932    time: 1.2711  last_time: 1.3196  data_time: 0.3131  last_data_time: 0.3374   lr: 0.02  max_mem: 17122M
[03/02 09:21:40 d2.utils.events]:  eta: 0:08:24  iter: 1099  total_loss: 0.4407  loss_cls: 0.08166  loss_box_reg: 0.1589  loss_mask: 0.1492  loss_rpn_cls: 0.01048  loss_rpn_loc: 0.05264    time: 1.2715  last_time: 1.2374  data_time: 0.3187  last_data_time: 0.3242   lr: 0.02  max_mem: 17122M
[03/02 09:22:13 d2.utils.events]:  eta: 0:07:59  iter: 1119  total_loss: 0.4345  loss_cls: 0.08284  loss_box_reg: 0.1563  loss_mask: 0.1456  loss_rpn_cls: 0.01062  loss_rpn_loc: 0.05    time: 1.2781  last_time: 1.4289  data_time: 0.3725  last_data_time: 0.4480   lr: 0.02  max_mem: 17122M
[03/02 09:22:39 d2.utils.events]:  eta: 0:07:35  iter: 1139  total_loss: 0.465  loss_cls: 0.08415  loss_box_reg: 0.1627  loss_mask: 0.1565  loss_rpn_cls: 0.01142  loss_rpn_loc: 0.05041    time: 1.2783  last_time: 1.3478  data_time: 0.3172  last_data_time: 0.3399   lr: 0.02  max_mem: 17122M
[03/02 09:23:05 d2.utils.events]:  eta: 0:07:10  iter: 1159  total_loss: 0.4518  loss_cls: 0.0796  loss_box_reg: 0.1584  loss_mask: 0.1457  loss_rpn_cls: 0.009273  loss_rpn_loc: 0.05143    time: 1.2784  last_time: 1.2777  data_time: 0.3246  last_data_time: 0.3023   lr: 0.02  max_mem: 17122M
[03/02 09:23:30 d2.utils.events]:  eta: 0:06:45  iter: 1179  total_loss: 0.4384  loss_cls: 0.08293  loss_box_reg: 0.152  loss_mask: 0.141  loss_rpn_cls: 0.01047  loss_rpn_loc: 0.04526    time: 1.2785  last_time: 1.3285  data_time: 0.3169  last_data_time: 0.3103   lr: 0.02  max_mem: 17122M
[03/02 09:23:56 d2.utils.events]:  eta: 0:06:20  iter: 1199  total_loss: 0.4338  loss_cls: 0.07491  loss_box_reg: 0.1475  loss_mask: 0.1452  loss_rpn_cls: 0.009815  loss_rpn_loc: 0.05107    time: 1.2789  last_time: 1.2647  data_time: 0.3246  last_data_time: 0.3006   lr: 0.02  max_mem: 17122M
[03/02 09:24:22 d2.utils.events]:  eta: 0:05:55  iter: 1219  total_loss: 0.4285  loss_cls: 0.07599  loss_box_reg: 0.1531  loss_mask: 0.1447  loss_rpn_cls: 0.009699  loss_rpn_loc: 0.04291    time: 1.2789  last_time: 1.2763  data_time: 0.3045  last_data_time: 0.3390   lr: 0.02  max_mem: 17122M
[03/02 09:24:48 d2.utils.events]:  eta: 0:05:30  iter: 1239  total_loss: 0.4241  loss_cls: 0.06926  loss_box_reg: 0.1503  loss_mask: 0.1497  loss_rpn_cls: 0.008005  loss_rpn_loc: 0.04126    time: 1.2791  last_time: 1.2999  data_time: 0.3250  last_data_time: 0.3015   lr: 0.02  max_mem: 17122M
[03/02 09:25:14 d2.utils.events]:  eta: 0:05:05  iter: 1259  total_loss: 0.4453  loss_cls: 0.08164  loss_box_reg: 0.1581  loss_mask: 0.1467  loss_rpn_cls: 0.01  loss_rpn_loc: 0.05113    time: 1.2796  last_time: 1.3375  data_time: 0.3325  last_data_time: 0.3546   lr: 0.02  max_mem: 17122M
[03/02 09:25:40 d2.utils.events]:  eta: 0:04:39  iter: 1279  total_loss: 0.4087  loss_cls: 0.07241  loss_box_reg: 0.1442  loss_mask: 0.1414  loss_rpn_cls: 0.008471  loss_rpn_loc: 0.04372    time: 1.2800  last_time: 1.2686  data_time: 0.3248  last_data_time: 0.3196   lr: 0.02  max_mem: 17122M
[03/02 09:26:07 d2.utils.events]:  eta: 0:04:14  iter: 1299  total_loss: 0.4437  loss_cls: 0.07696  loss_box_reg: 0.1625  loss_mask: 0.1468  loss_rpn_cls: 0.009096  loss_rpn_loc: 0.05136    time: 1.2809  last_time: 1.3551  data_time: 0.3518  last_data_time: 0.3237   lr: 0.02  max_mem: 17122M
[03/02 09:26:33 d2.utils.events]:  eta: 0:03:49  iter: 1319  total_loss: 0.4069  loss_cls: 0.07271  loss_box_reg: 0.145  loss_mask: 0.1419  loss_rpn_cls: 0.00838  loss_rpn_loc: 0.04293    time: 1.2812  last_time: 1.2998  data_time: 0.3277  last_data_time: 0.3204   lr: 0.02  max_mem: 17122M
[03/02 09:26:59 d2.utils.events]:  eta: 0:03:24  iter: 1339  total_loss: 0.4361  loss_cls: 0.07306  loss_box_reg: 0.1551  loss_mask: 0.1426  loss_rpn_cls: 0.007629  loss_rpn_loc: 0.04875    time: 1.2817  last_time: 1.3733  data_time: 0.3264  last_data_time: 0.3810   lr: 0.02  max_mem: 17122M
[03/02 09:27:25 d2.utils.events]:  eta: 0:02:58  iter: 1359  total_loss: 0.4225  loss_cls: 0.07184  loss_box_reg: 0.1559  loss_mask: 0.1427  loss_rpn_cls: 0.007958  loss_rpn_loc: 0.05362    time: 1.2823  last_time: 1.3235  data_time: 0.3275  last_data_time: 0.3493   lr: 0.02  max_mem: 17122M
[03/02 09:27:52 d2.utils.events]:  eta: 0:02:33  iter: 1379  total_loss: 0.4234  loss_cls: 0.07156  loss_box_reg: 0.1504  loss_mask: 0.1405  loss_rpn_cls: 0.008588  loss_rpn_loc: 0.0488    time: 1.2828  last_time: 1.3300  data_time: 0.3199  last_data_time: 0.3300   lr: 0.02  max_mem: 17122M
[03/02 09:28:18 d2.utils.events]:  eta: 0:02:07  iter: 1399  total_loss: 0.4175  loss_cls: 0.07537  loss_box_reg: 0.1495  loss_mask: 0.1359  loss_rpn_cls: 0.00717  loss_rpn_loc: 0.0511    time: 1.2829  last_time: 1.3997  data_time: 0.3168  last_data_time: 0.4376   lr: 0.02  max_mem: 17122M
[03/02 09:28:43 d2.utils.events]:  eta: 0:01:42  iter: 1419  total_loss: 0.4105  loss_cls: 0.0654  loss_box_reg: 0.1398  loss_mask: 0.1359  loss_rpn_cls: 0.007497  loss_rpn_loc: 0.04411    time: 1.2829  last_time: 1.1661  data_time: 0.3121  last_data_time: 0.2525   lr: 0.02  max_mem: 17122M
[03/02 09:29:09 d2.utils.events]:  eta: 0:01:16  iter: 1439  total_loss: 0.4219  loss_cls: 0.07543  loss_box_reg: 0.1503  loss_mask: 0.1363  loss_rpn_cls: 0.006727  loss_rpn_loc: 0.04358    time: 1.2829  last_time: 1.2216  data_time: 0.3053  last_data_time: 0.2907   lr: 0.02  max_mem: 17122M
[03/02 09:29:36 d2.utils.events]:  eta: 0:00:51  iter: 1459  total_loss: 0.4354  loss_cls: 0.07355  loss_box_reg: 0.1599  loss_mask: 0.1362  loss_rpn_cls: 0.009281  loss_rpn_loc: 0.04979    time: 1.2837  last_time: 1.2082  data_time: 0.3414  last_data_time: 0.2425   lr: 0.02  max_mem: 17122M
[03/02 09:30:02 d2.utils.events]:  eta: 0:00:25  iter: 1479  total_loss: 0.4202  loss_cls: 0.07269  loss_box_reg: 0.1554  loss_mask: 0.1393  loss_rpn_cls: 0.008242  loss_rpn_loc: 0.05051    time: 1.2842  last_time: 1.2440  data_time: 0.3202  last_data_time: 0.3035   lr: 0.02  max_mem: 17122M
[03/02 09:30:29 d2.utils.events]:  eta: 0:00:00  iter: 1499  total_loss: 0.4274  loss_cls: 0.07034  loss_box_reg: 0.1466  loss_mask: 0.1371  loss_rpn_cls: 0.008455  loss_rpn_loc: 0.04631    time: 1.2842  last_time: 1.2834  data_time: 0.3197  last_data_time: 0.3249   lr: 0.02  max_mem: 17122M
[03/02 09:30:30 d2.engine.hooks]: Overall training speed: 1498 iterations in 0:32:03 (1.2842 s / it)
[03/02 09:30:30 d2.engine.hooks]: Total training time: 0:32:16 (0:00:12 on hooks)
[03/02 09:30:32 d2.data.build]: Distribution of instances among all 11 categories:
|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
| background | 0            |    car     | 8021         | pedestrian | 3347         |
|            | 0            |            | 0            |            | 0            |
|            | 0            |            | 0            |            | 0            |
|            | 0            |   ignore   | 2765         |            |              |
|   total    | 14133        |            |              |            |              |
[03/02 09:30:32 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[03/02 09:30:32 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/02 09:30:32 d2.data.common]: Serializing 2919 elements to byte tensors and concatenating them all ...
[03/02 09:30:32 d2.data.common]: Serialized dataset takes 5.86 MiB
WARNING [03/02 09:30:32 d2.engine.defaults]: No evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
[03/02 09:30:39 d2.checkpoint.detection_checkpoint]: [DetectionCheckpointer] Loading from /ghome/group07/C5-W2/nms_075_score_025/model_0001499.pth ...
[03/02 09:30:42 d2.evaluation.coco_evaluation]: Trying to convert 'KITTI-MOTS_val' to COCO format ...
WARNING [03/02 09:30:42 d2.data.datasets.coco]: Using previously cached COCO format annotations at '/ghome/group07/C5-W2/nms_075_score_025/KITTI-MOTS_val_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[03/02 09:30:45 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[03/02 09:30:45 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/02 09:30:45 d2.data.common]: Serializing 2919 elements to byte tensors and concatenating them all ...
[03/02 09:30:45 d2.data.common]: Serialized dataset takes 5.86 MiB
[03/02 09:30:45 d2.evaluation.evaluator]: Start inference on 2919 batches
[03/02 09:30:47 d2.evaluation.evaluator]: Inference done 11/2919. Dataloading: 0.0022 s/iter. Inference: 0.0585 s/iter. Eval: 0.0032 s/iter. Total: 0.0638 s/iter. ETA=0:03:05
[03/02 09:30:52 d2.evaluation.evaluator]: Inference done 96/2919. Dataloading: 0.0029 s/iter. Inference: 0.0533 s/iter. Eval: 0.0030 s/iter. Total: 0.0596 s/iter. ETA=0:02:48
[03/02 09:30:57 d2.evaluation.evaluator]: Inference done 183/2919. Dataloading: 0.0028 s/iter. Inference: 0.0529 s/iter. Eval: 0.0029 s/iter. Total: 0.0589 s/iter. ETA=0:02:41
[03/02 09:31:02 d2.evaluation.evaluator]: Inference done 269/2919. Dataloading: 0.0028 s/iter. Inference: 0.0531 s/iter. Eval: 0.0027 s/iter. Total: 0.0588 s/iter. ETA=0:02:35
[03/02 09:31:07 d2.evaluation.evaluator]: Inference done 352/2919. Dataloading: 0.0029 s/iter. Inference: 0.0537 s/iter. Eval: 0.0025 s/iter. Total: 0.0592 s/iter. ETA=0:02:32
[03/02 09:31:12 d2.evaluation.evaluator]: Inference done 438/2919. Dataloading: 0.0028 s/iter. Inference: 0.0537 s/iter. Eval: 0.0024 s/iter. Total: 0.0591 s/iter. ETA=0:02:26
[03/02 09:31:18 d2.evaluation.evaluator]: Inference done 523/2919. Dataloading: 0.0028 s/iter. Inference: 0.0538 s/iter. Eval: 0.0024 s/iter. Total: 0.0591 s/iter. ETA=0:02:21
[03/02 09:31:23 d2.evaluation.evaluator]: Inference done 609/2919. Dataloading: 0.0028 s/iter. Inference: 0.0536 s/iter. Eval: 0.0024 s/iter. Total: 0.0590 s/iter. ETA=0:02:16
[03/02 09:31:28 d2.evaluation.evaluator]: Inference done 700/2919. Dataloading: 0.0028 s/iter. Inference: 0.0531 s/iter. Eval: 0.0024 s/iter. Total: 0.0585 s/iter. ETA=0:02:09
[03/02 09:31:33 d2.evaluation.evaluator]: Inference done 789/2919. Dataloading: 0.0028 s/iter. Inference: 0.0529 s/iter. Eval: 0.0025 s/iter. Total: 0.0583 s/iter. ETA=0:02:04
[03/02 09:31:38 d2.evaluation.evaluator]: Inference done 871/2919. Dataloading: 0.0029 s/iter. Inference: 0.0531 s/iter. Eval: 0.0025 s/iter. Total: 0.0586 s/iter. ETA=0:01:59
[03/02 09:31:43 d2.evaluation.evaluator]: Inference done 956/2919. Dataloading: 0.0029 s/iter. Inference: 0.0531 s/iter. Eval: 0.0026 s/iter. Total: 0.0586 s/iter. ETA=0:01:55
[03/02 09:31:48 d2.evaluation.evaluator]: Inference done 1041/2919. Dataloading: 0.0029 s/iter. Inference: 0.0531 s/iter. Eval: 0.0026 s/iter. Total: 0.0586 s/iter. ETA=0:01:50
[03/02 09:31:53 d2.evaluation.evaluator]: Inference done 1123/2919. Dataloading: 0.0029 s/iter. Inference: 0.0533 s/iter. Eval: 0.0026 s/iter. Total: 0.0588 s/iter. ETA=0:01:45
[03/02 09:31:58 d2.evaluation.evaluator]: Inference done 1208/2919. Dataloading: 0.0029 s/iter. Inference: 0.0533 s/iter. Eval: 0.0026 s/iter. Total: 0.0589 s/iter. ETA=0:01:40
[03/02 09:32:03 d2.evaluation.evaluator]: Inference done 1292/2919. Dataloading: 0.0029 s/iter. Inference: 0.0533 s/iter. Eval: 0.0026 s/iter. Total: 0.0590 s/iter. ETA=0:01:35
[03/02 09:32:08 d2.evaluation.evaluator]: Inference done 1376/2919. Dataloading: 0.0029 s/iter. Inference: 0.0534 s/iter. Eval: 0.0027 s/iter. Total: 0.0590 s/iter. ETA=0:01:31
[03/02 09:32:13 d2.evaluation.evaluator]: Inference done 1461/2919. Dataloading: 0.0029 s/iter. Inference: 0.0534 s/iter. Eval: 0.0026 s/iter. Total: 0.0590 s/iter. ETA=0:01:26
[03/02 09:32:18 d2.evaluation.evaluator]: Inference done 1546/2919. Dataloading: 0.0029 s/iter. Inference: 0.0534 s/iter. Eval: 0.0026 s/iter. Total: 0.0590 s/iter. ETA=0:01:21
[03/02 09:32:23 d2.evaluation.evaluator]: Inference done 1634/2919. Dataloading: 0.0029 s/iter. Inference: 0.0533 s/iter. Eval: 0.0026 s/iter. Total: 0.0589 s/iter. ETA=0:01:15
[03/02 09:32:28 d2.evaluation.evaluator]: Inference done 1719/2919. Dataloading: 0.0029 s/iter. Inference: 0.0533 s/iter. Eval: 0.0027 s/iter. Total: 0.0589 s/iter. ETA=0:01:10
[03/02 09:32:33 d2.evaluation.evaluator]: Inference done 1803/2919. Dataloading: 0.0029 s/iter. Inference: 0.0533 s/iter. Eval: 0.0027 s/iter. Total: 0.0590 s/iter. ETA=0:01:05
[03/02 09:32:38 d2.evaluation.evaluator]: Inference done 1892/2919. Dataloading: 0.0029 s/iter. Inference: 0.0531 s/iter. Eval: 0.0028 s/iter. Total: 0.0588 s/iter. ETA=0:01:00
[03/02 09:32:43 d2.evaluation.evaluator]: Inference done 1977/2919. Dataloading: 0.0029 s/iter. Inference: 0.0531 s/iter. Eval: 0.0028 s/iter. Total: 0.0589 s/iter. ETA=0:00:55
[03/02 09:32:48 d2.evaluation.evaluator]: Inference done 2060/2919. Dataloading: 0.0029 s/iter. Inference: 0.0532 s/iter. Eval: 0.0028 s/iter. Total: 0.0589 s/iter. ETA=0:00:50
[03/02 09:32:53 d2.evaluation.evaluator]: Inference done 2144/2919. Dataloading: 0.0029 s/iter. Inference: 0.0532 s/iter. Eval: 0.0029 s/iter. Total: 0.0590 s/iter. ETA=0:00:45
[03/02 09:32:58 d2.evaluation.evaluator]: Inference done 2232/2919. Dataloading: 0.0028 s/iter. Inference: 0.0531 s/iter. Eval: 0.0029 s/iter. Total: 0.0589 s/iter. ETA=0:00:40
[03/02 09:33:03 d2.evaluation.evaluator]: Inference done 2317/2919. Dataloading: 0.0028 s/iter. Inference: 0.0531 s/iter. Eval: 0.0029 s/iter. Total: 0.0589 s/iter. ETA=0:00:35
[03/02 09:33:08 d2.evaluation.evaluator]: Inference done 2399/2919. Dataloading: 0.0028 s/iter. Inference: 0.0531 s/iter. Eval: 0.0030 s/iter. Total: 0.0590 s/iter. ETA=0:00:30
[03/02 09:33:13 d2.evaluation.evaluator]: Inference done 2476/2919. Dataloading: 0.0028 s/iter. Inference: 0.0532 s/iter. Eval: 0.0031 s/iter. Total: 0.0592 s/iter. ETA=0:00:26
[03/02 09:33:18 d2.evaluation.evaluator]: Inference done 2557/2919. Dataloading: 0.0028 s/iter. Inference: 0.0532 s/iter. Eval: 0.0032 s/iter. Total: 0.0593 s/iter. ETA=0:00:21
[03/02 09:33:23 d2.evaluation.evaluator]: Inference done 2635/2919. Dataloading: 0.0028 s/iter. Inference: 0.0532 s/iter. Eval: 0.0033 s/iter. Total: 0.0595 s/iter. ETA=0:00:16
[03/02 09:33:28 d2.evaluation.evaluator]: Inference done 2718/2919. Dataloading: 0.0028 s/iter. Inference: 0.0532 s/iter. Eval: 0.0034 s/iter. Total: 0.0595 s/iter. ETA=0:00:11
[03/02 09:33:33 d2.evaluation.evaluator]: Inference done 2802/2919. Dataloading: 0.0028 s/iter. Inference: 0.0532 s/iter. Eval: 0.0034 s/iter. Total: 0.0595 s/iter. ETA=0:00:06
[03/02 09:33:38 d2.evaluation.evaluator]: Inference done 2887/2919. Dataloading: 0.0028 s/iter. Inference: 0.0532 s/iter. Eval: 0.0034 s/iter. Total: 0.0595 s/iter. ETA=0:00:01
[03/02 09:33:40 d2.evaluation.evaluator]: Total inference time: 0:02:53.422462 (0.059514 s / iter per device, on 1 devices)
[03/02 09:33:40 d2.evaluation.evaluator]: Total inference pure compute time: 0:02:35 (0.053195 s / iter per device, on 1 devices)
[03/02 09:33:41 d2.evaluation.coco_evaluation]: Preparing results for COCO format ...
[03/02 09:33:41 d2.evaluation.coco_evaluation]: Saving results to /ghome/group07/C5-W2/nms_075_score_025/coco_instances_results.json
[03/02 09:33:41 d2.evaluation.coco_evaluation]: Evaluating predictions with unofficial COCO API...
Loading and preparing results...
DONE (t=0.02s)
creating index...
index created!
[03/02 09:33:41 d2.evaluation.fast_eval_api]: Evaluate annotation type *bbox*
[03/02 09:33:43 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 2.13 seconds.
[03/02 09:33:43 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[03/02 09:33:43 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.08 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.413
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.581
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.467
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.267
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.483
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.545
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.161
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.468
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.471
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.313
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.530
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.673
[03/02 09:33:43 d2.evaluation.coco_evaluation]: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 41.334 | 58.065 | 46.739 | 26.700 | 48.264 | 54.545 |
[03/02 09:33:43 d2.evaluation.coco_evaluation]: Per-category bbox AP: 
| category   | AP   | category   | AP     | category   | AP     |
|:-----------|:-----|:-----------|:-------|:-----------|:-------|
| background | nan  | car        | 67.026 | pedestrian | 52.593 |
|            | nan  |            | nan    |            | nan    |
|            | nan  |            | nan    |            | nan    |
|            | nan  | ignore     | 4.381  |            |        |
Loading and preparing results...
DONE (t=0.14s)
creating index...
index created!
[03/02 09:33:43 d2.evaluation.fast_eval_api]: Evaluate annotation type *segm*
[03/02 09:33:44 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 1.19 seconds.
[03/02 09:33:44 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[03/02 09:33:45 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.08 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.383
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.561
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.432
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.220
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.454
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.564
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.147
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.435
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.437
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.280
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.492
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.629
[03/02 09:33:45 d2.evaluation.coco_evaluation]: Evaluation results for segm: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 38.342 | 56.057 | 43.190 | 21.974 | 45.378 | 56.396 |
[03/02 09:33:45 d2.evaluation.coco_evaluation]: Per-category segm AP: 
| category   | AP   | category   | AP     | category   | AP     |
|:-----------|:-----|:-----------|:-------|:-----------|:-------|
| background | nan  | car        | 68.031 | pedestrian | 43.031 |
|            | nan  |            | nan    |            | nan    |
|            | nan  |            | nan    |            | nan    |
|            | nan  | ignore     | 3.964  |            |        |
OrderedDict([('bbox', {'AP': 41.33353582837724, 'AP50': 58.06470748234466, 'AP75': 46.73932204164994, 'APs': 26.699961273647112, 'APm': 48.26425506625176, 'APl': 54.54493544605201, 'AP-background': nan, 'AP-car': 67.02597358386213, 'AP-pedestrian': 52.59323437806358, 'AP-': nan, 'AP-ignore': 4.381399523206006}), ('segm', {'AP': 38.34221197097713, 'AP50': 56.057150997897544, 'AP75': 43.19038287723414, 'APs': 21.973960698594812, 'APm': 45.37842134716783, 'APl': 56.39583112045725, 'AP-background': nan, 'AP-car': 68.03087558019419, 'AP-pedestrian': 43.031281150196996, 'AP-': nan, 'AP-ignore': 3.9644791825402086})])
